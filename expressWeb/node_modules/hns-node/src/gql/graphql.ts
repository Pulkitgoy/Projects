import { GraphQLClient } from 'graphql-request'
import * as Dom from 'graphql-request/dist/types.dom'
import { gql } from 'graphql-request'
export type Maybe<T> = T | null
export type InputMaybe<T> = Maybe<T>
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] }
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> }
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> }
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string
  String: string
  Boolean: boolean
  Int: number
  Float: number
  /**
   * Implement the DateTime<FixedOffset> scalar
   *
   * The input/output is a string in RFC3339 format.
   */
  DateTime: any
  /** A scalar that can represent any JSON value. */
  JSON: any
  /**
   * A UUID is a unique 128-bit number, stored as 16 octets. UUIDs are parsed as
   * Strings within GraphQL. UUIDs are used to assign unique identifiers to
   * entities without requiring a central allocating authority.
   *
   * # References
   *
   * * [Wikipedia: Universally Unique Identifier](http://en.wikipedia.org/wiki/Universally_unique_identifier)
   * * [RFC4122: A Universally Unique IDentifier (UUID) URN Namespace](http://tools.ietf.org/html/rfc4122)
   */
  UUID: string
}

export type Admin = {
  __typename?: 'Admin'
  createdAt: Scalars['DateTime']
  email: Scalars['String']
  firstName?: Maybe<Scalars['String']>
  id: Scalars['UUID']
  lastName?: Maybe<Scalars['String']>
  phone?: Maybe<Scalars['String']>
  updatedAt: Scalars['DateTime']
}

export type AdminConnection = {
  __typename?: 'AdminConnection'
  /** A list of edges. */
  edges: Array<AdminEdge>
  /** A list of nodes. */
  nodes: Array<Admin>
  /** Information to aid in pagination. */
  pageInfo: PageInfo
}

/** An edge in a connection. */
export type AdminEdge = {
  __typename?: 'AdminEdge'
  /** A cursor for use in pagination */
  cursor: Scalars['String']
  /** The item at the end of the edge */
  node: Admin
}

export type AdminFilters = {
  email?: InputMaybe<Scalars['String']>
  firstName?: InputMaybe<Scalars['String']>
  lastName?: InputMaybe<Scalars['String']>
  phone?: InputMaybe<Scalars['String']>
}

export enum AdminSortByKeys {
  Email = 'email',
  Id = 'id',
}

export type App = {
  __typename?: 'App'
  active: Scalars['Boolean']
  apiKeyCreatedAt?: Maybe<Scalars['DateTime']>
  createdAt: Scalars['DateTime']
  enabledOrigin?: Maybe<Scalars['String']>
  hasApiKey: Scalars['Boolean']
  hasVapidKeys: Scalars['Boolean']
  id: Scalars['UUID']
  name: Scalars['String']
  updatedAt: Scalars['DateTime']
  vapidKeysCreatedAt?: Maybe<Scalars['DateTime']>
  vapidPublicKey?: Maybe<Scalars['String']>
  vapidSignatureMailto?: Maybe<Scalars['String']>
}

export type AppChannel = {
  __typename?: 'AppChannel'
  appId: Scalars['UUID']
  channel: Channel
  createdAt: Scalars['DateTime']
  id: Scalars['UUID']
  updatedAt: Scalars['DateTime']
  value: Scalars['JSON']
}

export type AppConnection = {
  __typename?: 'AppConnection'
  /** A list of edges. */
  edges: Array<AppEdge>
  /** A list of nodes. */
  nodes: Array<App>
  /** Information to aid in pagination. */
  pageInfo: PageInfo
}

/** An edge in a connection. */
export type AppEdge = {
  __typename?: 'AppEdge'
  /** A cursor for use in pagination */
  cursor: Scalars['String']
  /** The item at the end of the edge */
  node: App
}

export type AppFilters = {
  ids?: InputMaybe<Array<Scalars['UUID']>>
  name?: InputMaybe<Scalars['String']>
}

export enum AppSortByKeys {
  Id = 'id',
  Name = 'name',
}

export enum Channel {
  Email = 'EMAIL',
  Sms = 'SMS',
  WebPush = 'WEB_PUSH',
}

export type CreateAdminData = {
  email: Scalars['String']
  firstName?: InputMaybe<Scalars['String']>
  lastName?: InputMaybe<Scalars['String']>
  password: Scalars['String']
  phone?: InputMaybe<Scalars['String']>
}

export type CreateAppData = {
  active?: InputMaybe<Scalars['Boolean']>
  name: Scalars['String']
}

export type CreateNotificationData = {
  rawChannels?: InputMaybe<Array<NotificationRawChannelInput>>
  rawContent?: InputMaybe<NotificationContent>
  recipientIds?: InputMaybe<Array<Scalars['ID']>>
  recipientRefIds?: InputMaybe<Array<Scalars['ID']>>
  replacements?: InputMaybe<Scalars['JSON']>
  scheduledFor?: InputMaybe<Scalars['DateTime']>
  senderIcon?: InputMaybe<Scalars['String']>
  senderId?: InputMaybe<Scalars['ID']>
  senderName?: InputMaybe<Scalars['String']>
  senderRefId?: InputMaybe<Scalars['ID']>
  typeId?: InputMaybe<Scalars['ID']>
  typeSlug?: InputMaybe<Scalars['String']>
}

export type CreateNotificationTypeData = {
  active?: InputMaybe<Scalars['Boolean']>
  appId: Scalars['UUID']
  description?: InputMaybe<Scalars['String']>
  emailEnabled?: InputMaybe<Scalars['Boolean']>
  emailTemplateSubject?: InputMaybe<Scalars['String']>
  emailTemplateText?: InputMaybe<Scalars['String']>
  name: Scalars['String']
  notificationCenterBody?: InputMaybe<Scalars['String']>
  notificationCenterClickUrl?: InputMaybe<Scalars['String']>
  notificationCenterEnabled?: InputMaybe<Scalars['Boolean']>
  notificationCenterIcon?: InputMaybe<Scalars['String']>
  notificationCenterTitle?: InputMaybe<Scalars['String']>
  slug: Scalars['String']
  smsEnabled?: InputMaybe<Scalars['Boolean']>
  smsTemplate?: InputMaybe<Scalars['String']>
  tempEmailTemplateHtml?: InputMaybe<Scalars['String']>
  webPushEnabled?: InputMaybe<Scalars['Boolean']>
  webPushTemplate?: InputMaybe<Scalars['JSON']>
}

export type CreateUserChannelData = {
  active: Scalars['Boolean']
  channel: Channel
  details: Scalars['JSON']
  userId: Scalars['UUID']
}

export type CreateUserChannelInput = {
  active: Scalars['Boolean']
  channel: Channel
  details: Scalars['JSON']
}

export type CreateUserData = {
  appId?: InputMaybe<Scalars['ID']>
  channels: Array<CreateUserChannelInput>
  refId: Scalars['ID']
}

export type Credentials = {
  email: Scalars['String']
  password: Scalars['String']
}

export type GeneratedApiKey = {
  __typename?: 'GeneratedApiKey'
  /** The private API key for the app visible only once */
  apiKey: Scalars['String']
}

export type GeneratedVapidKeys = {
  __typename?: 'GeneratedVapidKeys'
  /** The public VAPID key */
  publicKey: Scalars['String']
}

export type InboxFilters = {
  unreadOnly?: InputMaybe<Scalars['Boolean']>
}

export enum InboxSortByKeys {
  Id = 'id',
}

export type LoginResult = {
  __typename?: 'LoginResult'
  user: Admin
}

export type Mutation = {
  __typename?: 'Mutation'
  createAdmin: Admin
  createApp: App
  createNotification: Notification
  createNotificationType: NotificationType
  createUser: User
  createUserChannel: UserChannel
  deleteAdmin: Scalars['Boolean']
  deleteApp: Scalars['Boolean']
  deleteNotification: Scalars['Boolean']
  deleteNotificationType: Scalars['Boolean']
  deleteUser: Scalars['Boolean']
  deleteUserChannel: Scalars['Boolean']
  destroyApiKey: Scalars['Boolean']
  destroyVapidKeys: Scalars['Boolean']
  generateApiKey: GeneratedApiKey
  /**
   * * Generate a new user token to fetch notifications from client
   *      * * `appId` - Don't use this from a client
   *      * * `id` - Generate token by user id
   *      * * `refId` - Generate token by user ref_id
   */
  generateUserToken: Scalars['String']
  generateVapidKeys: GeneratedVapidKeys
  hc_createChannel: UserChannel
  hc_deleteChannel: Scalars['Boolean']
  hc_markAsRead: Scalars['Boolean']
  hc_setChannel: UserChannel
  /** * Admin login */
  login: LoginResult
  /** * Admin logout */
  logout: Scalars['Boolean']
  resetEnabledOrigin: Scalars['Boolean']
  resetVapidSignatureMailto: Scalars['Boolean']
  saveUser: User
  send: Notification
  setAppChannel: AppChannel
  setEnabledOrigin: Scalars['String']
  setVapidSignatureMailto: Scalars['String']
  updateAdmin: Admin
  updateApp: App
  updateNotificationType: NotificationType
  updateUser: User
  updateUserChannel: UserChannel
}

export type MutationCreateAdminArgs = {
  data: CreateAdminData
}

export type MutationCreateAppArgs = {
  data: CreateAppData
}

export type MutationCreateNotificationArgs = {
  appId?: InputMaybe<Scalars['String']>
  data: CreateNotificationData
}

export type MutationCreateNotificationTypeArgs = {
  data: CreateNotificationTypeData
}

export type MutationCreateUserArgs = {
  data: CreateUserData
}

export type MutationCreateUserChannelArgs = {
  data: CreateUserChannelData
}

export type MutationDeleteAdminArgs = {
  id: Scalars['ID']
}

export type MutationDeleteAppArgs = {
  id: Scalars['ID']
}

export type MutationDeleteNotificationArgs = {
  id: Scalars['ID']
}

export type MutationDeleteNotificationTypeArgs = {
  id: Scalars['ID']
}

export type MutationDeleteUserArgs = {
  appId?: InputMaybe<Scalars['ID']>
  id?: InputMaybe<Scalars['ID']>
  refId?: InputMaybe<Scalars['ID']>
}

export type MutationDeleteUserChannelArgs = {
  id: Scalars['ID']
}

export type MutationDestroyApiKeyArgs = {
  appId: Scalars['ID']
}

export type MutationDestroyVapidKeysArgs = {
  appId: Scalars['ID']
}

export type MutationGenerateApiKeyArgs = {
  appId: Scalars['ID']
}

export type MutationGenerateUserTokenArgs = {
  appId?: InputMaybe<Scalars['ID']>
  id?: InputMaybe<Scalars['ID']>
  refId?: InputMaybe<Scalars['ID']>
}

export type MutationGenerateVapidKeysArgs = {
  appId: Scalars['ID']
}

export type MutationHc_CreateChannelArgs = {
  active: Scalars['Boolean']
  channel: Channel
  details: Scalars['JSON']
}

export type MutationHc_DeleteChannelArgs = {
  channel: Channel
}

export type MutationHc_MarkAsReadArgs = {
  inboxIds: Array<Scalars['UUID']>
}

export type MutationHc_SetChannelArgs = {
  active: Scalars['Boolean']
  channel: Channel
  details: Scalars['JSON']
}

export type MutationLoginArgs = {
  credentials: Credentials
}

export type MutationResetEnabledOriginArgs = {
  appId: Scalars['ID']
}

export type MutationResetVapidSignatureMailtoArgs = {
  appId: Scalars['ID']
}

export type MutationSaveUserArgs = {
  data: SaveUserData
  id?: InputMaybe<Scalars['ID']>
  refId?: InputMaybe<Scalars['ID']>
}

export type MutationSendArgs = {
  appId?: InputMaybe<Scalars['ID']>
  forceSend?: InputMaybe<Scalars['Boolean']>
  notification?: InputMaybe<CreateNotificationData>
  notificationId?: InputMaybe<Scalars['ID']>
}

export type MutationSetAppChannelArgs = {
  appId: Scalars['ID']
  channel: Channel
  value: Scalars['JSON']
}

export type MutationSetEnabledOriginArgs = {
  appId: Scalars['ID']
  origin: Scalars['String']
}

export type MutationSetVapidSignatureMailtoArgs = {
  appId: Scalars['ID']
  mailto: Scalars['String']
}

export type MutationUpdateAdminArgs = {
  data: UpdateAdminData
  id: Scalars['ID']
}

export type MutationUpdateAppArgs = {
  data: UpdateAppData
  id: Scalars['ID']
}

export type MutationUpdateNotificationTypeArgs = {
  data: UpdateNotificationTypeData
  id: Scalars['ID']
}

export type MutationUpdateUserArgs = {
  data: UpdateUserData
  id?: InputMaybe<Scalars['ID']>
  refId?: InputMaybe<Scalars['ID']>
}

export type MutationUpdateUserChannelArgs = {
  data: UpdateUserChannelData
  id: Scalars['ID']
}

export type Notification = {
  __typename?: 'Notification'
  addedToQueueAt?: Maybe<Scalars['DateTime']>
  appId: Scalars['UUID']
  createdAt: Scalars['DateTime']
  id: Scalars['UUID']
  notificationType?: Maybe<NotificationType>
  rawChannels?: Maybe<Scalars['JSON']>
  rawContent?: Maybe<Scalars['JSON']>
  recipients: Array<NotificationRecipient>
  replacements?: Maybe<Scalars['JSON']>
  scheduledFor?: Maybe<Scalars['DateTime']>
  senderIcon?: Maybe<Scalars['String']>
  senderId?: Maybe<Scalars['UUID']>
  senderName?: Maybe<Scalars['String']>
  typeId?: Maybe<Scalars['UUID']>
  updatedAt: Scalars['DateTime']
}

export type NotificationConnection = {
  __typename?: 'NotificationConnection'
  /** A list of edges. */
  edges: Array<NotificationEdge>
  /** A list of nodes. */
  nodes: Array<Notification>
  /** Information to aid in pagination. */
  pageInfo: PageInfo
}

export type NotificationContent = {
  emailEnabled?: InputMaybe<Scalars['Boolean']>
  emailHtml?: InputMaybe<Scalars['String']>
  emailSubject?: InputMaybe<Scalars['String']>
  emailText?: InputMaybe<Scalars['String']>
  notificationCenterBody?: InputMaybe<Scalars['String']>
  notificationCenterClickUrl?: InputMaybe<Scalars['String']>
  notificationCenterEnabled?: InputMaybe<Scalars['Boolean']>
  notificationCenterIcon?: InputMaybe<Scalars['String']>
  notificationCenterTitle?: InputMaybe<Scalars['String']>
  smsEnabled?: InputMaybe<Scalars['Boolean']>
  smsText?: InputMaybe<Scalars['String']>
  webPushBadge?: InputMaybe<Scalars['String']>
  webPushBody?: InputMaybe<Scalars['String']>
  webPushClickUrl?: InputMaybe<Scalars['String']>
  webPushData?: InputMaybe<Scalars['JSON']>
  webPushDir?: InputMaybe<Scalars['String']>
  webPushEnabled?: InputMaybe<Scalars['Boolean']>
  webPushIcon?: InputMaybe<Scalars['String']>
  webPushImage?: InputMaybe<Scalars['String']>
  webPushLang?: InputMaybe<Scalars['String']>
  webPushTag?: InputMaybe<Scalars['String']>
  webPushTimestamp?: InputMaybe<Scalars['Int']>
  webPushTitle?: InputMaybe<Scalars['String']>
}

/** An edge in a connection. */
export type NotificationEdge = {
  __typename?: 'NotificationEdge'
  /** A cursor for use in pagination */
  cursor: Scalars['String']
  /** The item at the end of the edge */
  node: Notification
}

export type NotificationFilters = {
  addedToQueueAt?: InputMaybe<Scalars['DateTime']>
  appId?: InputMaybe<Scalars['ID']>
  createdAt?: InputMaybe<Scalars['DateTime']>
  scheduledFor?: InputMaybe<Scalars['DateTime']>
  senderId?: InputMaybe<Scalars['ID']>
  typeId?: InputMaybe<Scalars['ID']>
  updatedAt?: InputMaybe<Scalars['DateTime']>
}

export type NotificationInbox = {
  __typename?: 'NotificationInbox'
  createdAt: Scalars['DateTime']
  id: Scalars['UUID']
  notificationId: Scalars['UUID']
  readAt?: Maybe<Scalars['DateTime']>
  senderId?: Maybe<Scalars['UUID']>
  updatedAt: Scalars['DateTime']
  userId: Scalars['UUID']
  value: Scalars['JSON']
}

export type NotificationInboxConnection = {
  __typename?: 'NotificationInboxConnection'
  /** A list of edges. */
  edges: Array<NotificationInboxEdge>
  /** A list of nodes. */
  nodes: Array<NotificationInbox>
  /** Information to aid in pagination. */
  pageInfo: PageInfo
}

/** An edge in a connection. */
export type NotificationInboxEdge = {
  __typename?: 'NotificationInboxEdge'
  /** A cursor for use in pagination */
  cursor: Scalars['String']
  /** The item at the end of the edge */
  node: NotificationInbox
}

export type NotificationRawChannelInput = {
  channel: Channel
  value: Scalars['JSON']
}

export type NotificationRecipient = {
  __typename?: 'NotificationRecipient'
  createdAt: Scalars['DateTime']
  id: Scalars['UUID']
  notificationId?: Maybe<Scalars['UUID']>
  readAt?: Maybe<Scalars['DateTime']>
  sentAt?: Maybe<Scalars['DateTime']>
  updatedAt: Scalars['DateTime']
  userId?: Maybe<Scalars['UUID']>
}

export enum NotificationSortByKeys {
  Id = 'id',
}

export type NotificationType = {
  __typename?: 'NotificationType'
  active: Scalars['Boolean']
  app?: Maybe<App>
  appId: Scalars['UUID']
  createdAt: Scalars['DateTime']
  description: Scalars['String']
  emailEnabled: Scalars['Boolean']
  emailTemplateHtmlPath?: Maybe<Scalars['String']>
  emailTemplateSubject?: Maybe<Scalars['String']>
  emailTemplateText?: Maybe<Scalars['String']>
  id: Scalars['UUID']
  name: Scalars['String']
  notificationCenterBody?: Maybe<Scalars['String']>
  notificationCenterClickUrl?: Maybe<Scalars['String']>
  notificationCenterEnabled: Scalars['Boolean']
  notificationCenterIcon?: Maybe<Scalars['String']>
  notificationCenterTitle?: Maybe<Scalars['String']>
  slug: Scalars['String']
  smsEnabled: Scalars['Boolean']
  smsTemplate?: Maybe<Scalars['String']>
  tempEmailTemplateHtml?: Maybe<Scalars['String']>
  updatedAt: Scalars['DateTime']
  webPushEnabled: Scalars['Boolean']
  webPushTemplate?: Maybe<Scalars['JSON']>
}

export type NotificationTypeConnection = {
  __typename?: 'NotificationTypeConnection'
  /** A list of edges. */
  edges: Array<NotificationTypeEdge>
  /** A list of nodes. */
  nodes: Array<NotificationType>
  /** Information to aid in pagination. */
  pageInfo: PageInfo
}

/** An edge in a connection. */
export type NotificationTypeEdge = {
  __typename?: 'NotificationTypeEdge'
  /** A cursor for use in pagination */
  cursor: Scalars['String']
  /** The item at the end of the edge */
  node: NotificationType
}

export type NotificationTypeFilters = {
  appId?: InputMaybe<Scalars['UUID']>
  ids?: InputMaybe<Array<Scalars['UUID']>>
  name?: InputMaybe<Scalars['String']>
}

export enum NotificationTypeSortByKeys {
  CreatedAt = 'createdAt',
  Id = 'id',
  Name = 'name',
  UpdatedAt = 'updatedAt',
}

/** Information about pagination in a connection */
export type PageInfo = {
  __typename?: 'PageInfo'
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']>
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']>
}

export type Query = {
  __typename?: 'Query'
  admin?: Maybe<Admin>
  adminMe?: Maybe<Admin>
  admins: AdminConnection
  adminsCount: Scalars['Int']
  app?: Maybe<App>
  appChannel?: Maybe<AppChannel>
  apps: AppConnection
  appsCount: Scalars['Int']
  hc_inbox: NotificationInboxConnection
  hc_unreadCount: Scalars['Int']
  hc_userMe?: Maybe<User>
  notification?: Maybe<Notification>
  notificationType?: Maybe<NotificationType>
  notificationTypes: NotificationTypeConnection
  notificationTypesCount: Scalars['Int']
  notifications: NotificationConnection
  notificationsCount: Scalars['Int']
  user?: Maybe<User>
  userChannel?: Maybe<UserChannel>
  userChannels: UserChannelConnection
  userChannelsCount: Scalars['Int']
  users: UserConnection
  usersCount: Scalars['Int']
}

export type QueryAdminArgs = {
  id: Scalars['ID']
}

export type QueryAdminsArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  filters?: InputMaybe<AdminFilters>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  revert?: InputMaybe<Scalars['Boolean']>
  sortBy?: InputMaybe<AdminSortByKeys>
}

export type QueryAppArgs = {
  id: Scalars['ID']
}

export type QueryAppChannelArgs = {
  appId: Scalars['ID']
  channel: Channel
}

export type QueryAppsArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  filters?: InputMaybe<AppFilters>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  revert?: InputMaybe<Scalars['Boolean']>
  sortBy?: InputMaybe<AppSortByKeys>
}

export type QueryHc_InboxArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  filters?: InputMaybe<InboxFilters>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  revert?: InputMaybe<Scalars['Boolean']>
  sortBy?: InputMaybe<InboxSortByKeys>
}

export type QueryNotificationArgs = {
  id: Scalars['ID']
}

export type QueryNotificationTypeArgs = {
  id: Scalars['ID']
}

export type QueryNotificationTypesArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  filters?: InputMaybe<NotificationTypeFilters>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  revert?: InputMaybe<Scalars['Boolean']>
  sortBy?: InputMaybe<NotificationTypeSortByKeys>
}

export type QueryNotificationsArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  filters?: InputMaybe<NotificationFilters>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  revert?: InputMaybe<Scalars['Boolean']>
  sortBy?: InputMaybe<NotificationSortByKeys>
}

export type QueryUserArgs = {
  id?: InputMaybe<Scalars['ID']>
  refId?: InputMaybe<Scalars['ID']>
}

export type QueryUserChannelArgs = {
  id: Scalars['ID']
}

export type QueryUserChannelsArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  filters?: InputMaybe<UserChannelFilters>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  revert?: InputMaybe<Scalars['Boolean']>
  sortBy?: InputMaybe<UserChannelSortByKeys>
}

export type QueryUsersArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  filters?: InputMaybe<UserFilters>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  revert?: InputMaybe<Scalars['Boolean']>
  sortBy?: InputMaybe<UserSortByKeys>
}

export type QueryUsersCountArgs = {
  filters?: InputMaybe<UserFilters>
}

export type SaveUserData = {
  appId?: InputMaybe<Scalars['ID']>
  channels?: InputMaybe<Array<UpdateUserChannelInput>>
  refId?: InputMaybe<Scalars['ID']>
}

export type UpdateAdminData = {
  email?: InputMaybe<Scalars['String']>
  firstName?: InputMaybe<Scalars['String']>
  lastName?: InputMaybe<Scalars['String']>
  password?: InputMaybe<Scalars['String']>
  phone?: InputMaybe<Scalars['String']>
}

export type UpdateAppData = {
  active?: InputMaybe<Scalars['Boolean']>
  name?: InputMaybe<Scalars['String']>
}

export type UpdateNotificationTypeData = {
  active?: InputMaybe<Scalars['Boolean']>
  description?: InputMaybe<Scalars['String']>
  emailEnabled?: InputMaybe<Scalars['Boolean']>
  emailTemplateSubject?: InputMaybe<Scalars['String']>
  emailTemplateText?: InputMaybe<Scalars['String']>
  name?: InputMaybe<Scalars['String']>
  notificationCenterBody?: InputMaybe<Scalars['String']>
  notificationCenterClickUrl?: InputMaybe<Scalars['String']>
  notificationCenterEnabled?: InputMaybe<Scalars['Boolean']>
  notificationCenterIcon?: InputMaybe<Scalars['String']>
  notificationCenterTitle?: InputMaybe<Scalars['String']>
  slug?: InputMaybe<Scalars['String']>
  smsEnabled?: InputMaybe<Scalars['Boolean']>
  smsTemplate?: InputMaybe<Scalars['String']>
  tempEmailTemplateHtml?: InputMaybe<Scalars['String']>
  webPushEnabled?: InputMaybe<Scalars['Boolean']>
  webPushTemplate?: InputMaybe<Scalars['JSON']>
}

export type UpdateUserChannelData = {
  active?: InputMaybe<Scalars['Boolean']>
  details?: InputMaybe<Scalars['JSON']>
}

export type UpdateUserChannelInput = {
  active?: InputMaybe<Scalars['Boolean']>
  channel?: InputMaybe<Channel>
  details?: InputMaybe<Scalars['JSON']>
  id?: InputMaybe<Scalars['ID']>
  toDelete?: InputMaybe<Scalars['Boolean']>
}

export type UpdateUserData = {
  channels?: InputMaybe<Array<UpdateUserChannelInput>>
  refId?: InputMaybe<Scalars['ID']>
}

export type User = {
  __typename?: 'User'
  app?: Maybe<App>
  appId: Scalars['UUID']
  channels: Array<UserChannel>
  createdAt: Scalars['DateTime']
  id: Scalars['UUID']
  refId: Scalars['String']
  updatedAt: Scalars['DateTime']
}

export type UserChannel = {
  __typename?: 'UserChannel'
  active: Scalars['Boolean']
  channel: Channel
  createdAt: Scalars['DateTime']
  details: Scalars['JSON']
  id: Scalars['UUID']
  updatedAt: Scalars['DateTime']
  userId: Scalars['UUID']
}

export type UserChannelConnection = {
  __typename?: 'UserChannelConnection'
  /** A list of edges. */
  edges: Array<UserChannelEdge>
  /** A list of nodes. */
  nodes: Array<UserChannel>
  /** Information to aid in pagination. */
  pageInfo: PageInfo
}

/** An edge in a connection. */
export type UserChannelEdge = {
  __typename?: 'UserChannelEdge'
  /** A cursor for use in pagination */
  cursor: Scalars['String']
  /** The item at the end of the edge */
  node: UserChannel
}

export type UserChannelFilters = {
  active?: InputMaybe<Scalars['Boolean']>
  channel?: InputMaybe<Channel>
  userId?: InputMaybe<Scalars['UUID']>
}

export enum UserChannelSortByKeys {
  CreatedAt = 'createdAt',
  Id = 'id',
}

export type UserConnection = {
  __typename?: 'UserConnection'
  /** A list of edges. */
  edges: Array<UserEdge>
  /** A list of nodes. */
  nodes: Array<User>
  /** Information to aid in pagination. */
  pageInfo: PageInfo
}

/** An edge in a connection. */
export type UserEdge = {
  __typename?: 'UserEdge'
  /** A cursor for use in pagination */
  cursor: Scalars['String']
  /** The item at the end of the edge */
  node: User
}

export type UserFilters = {
  appId?: InputMaybe<Scalars['UUID']>
  refId?: InputMaybe<Scalars['ID']>
}

export enum UserSortByKeys {
  CreatedAt = 'createdAt',
  Id = 'id',
  RefId = 'refId',
}

export type CreateNotificationMutationVariables = Exact<{
  data: CreateNotificationData
}>

export type CreateNotificationMutation = {
  __typename?: 'Mutation'
  createNotification: {
    __typename?: 'Notification'
    id: string
    appId: string
    senderId?: string | null
    typeId?: string | null
    rawContent?: any | null
    rawChannels?: any | null
    replacements?: any | null
    addedToQueueAt?: any | null
    scheduledFor?: any | null
    createdAt: any
    updatedAt: any
    notificationType?: { __typename?: 'NotificationType'; id: string; name: string } | null
  }
}

export type CreateNotificationTypeMutationVariables = Exact<{
  data: CreateNotificationTypeData
}>

export type CreateNotificationTypeMutation = {
  __typename?: 'Mutation'
  createNotificationType: {
    __typename?: 'NotificationType'
    id: string
    appId: string
    name: string
    description: string
    notificationCenterTitle?: string | null
    notificationCenterBody?: string | null
    notificationCenterIcon?: string | null
    emailTemplateSubject?: string | null
    emailTemplateText?: string | null
    emailTemplateHtmlPath?: string | null
    tempEmailTemplateHtml?: string | null
    smsTemplate?: string | null
    webPushTemplate?: any | null
    notificationCenterEnabled: boolean
    emailEnabled: boolean
    smsEnabled: boolean
    webPushEnabled: boolean
    active: boolean
    createdAt: any
    updatedAt: any
  }
}

export type CreateUserMutationVariables = Exact<{
  data: CreateUserData
}>

export type CreateUserMutation = {
  __typename?: 'Mutation'
  createUser: {
    __typename?: 'User'
    id: string
    appId: string
    refId: string
    createdAt: any
    updatedAt: any
    app?: {
      __typename?: 'App'
      id: string
      name: string
      apiKeyCreatedAt?: any | null
      enabledOrigin?: string | null
      active: boolean
      createdAt: any
      updatedAt: any
      hasApiKey: boolean
    } | null
    channels: Array<{
      __typename?: 'UserChannel'
      id: string
      channel: Channel
      details: any
      active: boolean
      createdAt: any
      updatedAt: any
    }>
  }
}

export type CreateUserChannelMutationVariables = Exact<{
  data: CreateUserChannelData
}>

export type CreateUserChannelMutation = {
  __typename?: 'Mutation'
  createUserChannel: {
    __typename?: 'UserChannel'
    id: string
    channel: Channel
    details: any
    active: boolean
    createdAt: any
    updatedAt: any
  }
}

export type DeleteNotificationMutationVariables = Exact<{
  id: Scalars['ID']
}>

export type DeleteNotificationMutation = { __typename?: 'Mutation'; deleteNotification: boolean }

export type DeleteNotificationTypeMutationVariables = Exact<{
  id: Scalars['ID']
}>

export type DeleteNotificationTypeMutation = { __typename?: 'Mutation'; deleteNotificationType: boolean }

export type DeleteUserMutationVariables = Exact<{
  id?: InputMaybe<Scalars['ID']>
  refId?: InputMaybe<Scalars['ID']>
}>

export type DeleteUserMutation = { __typename?: 'Mutation'; deleteUser: boolean }

export type DeleteUserChannelMutationVariables = Exact<{
  id: Scalars['ID']
}>

export type DeleteUserChannelMutation = { __typename?: 'Mutation'; deleteUserChannel: boolean }

export type AppFragmentFragment = {
  __typename?: 'App'
  id: string
  name: string
  apiKeyCreatedAt?: any | null
  enabledOrigin?: string | null
  active: boolean
  createdAt: any
  updatedAt: any
  hasApiKey: boolean
}

export type NotificationFragmentFragment = {
  __typename?: 'Notification'
  id: string
  appId: string
  senderId?: string | null
  typeId?: string | null
  rawContent?: any | null
  rawChannels?: any | null
  replacements?: any | null
  addedToQueueAt?: any | null
  scheduledFor?: any | null
  createdAt: any
  updatedAt: any
}

export type NotificationRecipientFragmentFragment = {
  __typename?: 'NotificationRecipient'
  id: string
  notificationId?: string | null
  userId?: string | null
  sentAt?: any | null
  readAt?: any | null
  createdAt: any
  updatedAt: any
}

export type NotificationTypeFragmentFragment = {
  __typename?: 'NotificationType'
  id: string
  appId: string
  name: string
  description: string
  notificationCenterTitle?: string | null
  notificationCenterBody?: string | null
  notificationCenterIcon?: string | null
  emailTemplateSubject?: string | null
  emailTemplateText?: string | null
  emailTemplateHtmlPath?: string | null
  tempEmailTemplateHtml?: string | null
  smsTemplate?: string | null
  webPushTemplate?: any | null
  notificationCenterEnabled: boolean
  emailEnabled: boolean
  smsEnabled: boolean
  webPushEnabled: boolean
  active: boolean
  createdAt: any
  updatedAt: any
}

export type PageInfoFragmentFragment = {
  __typename?: 'PageInfo'
  hasPreviousPage: boolean
  hasNextPage: boolean
  startCursor?: string | null
  endCursor?: string | null
}

export type UserChannelFragmentFragment = {
  __typename?: 'UserChannel'
  id: string
  channel: Channel
  details: any
  active: boolean
  createdAt: any
  updatedAt: any
}

export type UserFragmentFragment = {
  __typename?: 'User'
  id: string
  appId: string
  refId: string
  createdAt: any
  updatedAt: any
}

export type GenerateUserTokenMutationVariables = Exact<{
  id?: InputMaybe<Scalars['ID']>
  refId?: InputMaybe<Scalars['ID']>
}>

export type GenerateUserTokenMutation = { __typename?: 'Mutation'; generateUserToken: string }

export type GetNotificationQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type GetNotificationQuery = {
  __typename?: 'Query'
  notification?: {
    __typename?: 'Notification'
    id: string
    appId: string
    senderId?: string | null
    typeId?: string | null
    rawContent?: any | null
    rawChannels?: any | null
    replacements?: any | null
    addedToQueueAt?: any | null
    scheduledFor?: any | null
    createdAt: any
    updatedAt: any
    notificationType?: { __typename?: 'NotificationType'; id: string; name: string } | null
  } | null
}

export type GetNotificationTypeQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type GetNotificationTypeQuery = {
  __typename?: 'Query'
  notificationType?: {
    __typename?: 'NotificationType'
    id: string
    appId: string
    name: string
    description: string
    notificationCenterTitle?: string | null
    notificationCenterBody?: string | null
    notificationCenterIcon?: string | null
    emailTemplateSubject?: string | null
    emailTemplateText?: string | null
    emailTemplateHtmlPath?: string | null
    tempEmailTemplateHtml?: string | null
    smsTemplate?: string | null
    webPushTemplate?: any | null
    notificationCenterEnabled: boolean
    emailEnabled: boolean
    smsEnabled: boolean
    webPushEnabled: boolean
    active: boolean
    createdAt: any
    updatedAt: any
  } | null
}

export type GetNotificationTypesQueryVariables = Exact<{
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  revert?: InputMaybe<Scalars['Boolean']>
  sortBy?: InputMaybe<NotificationTypeSortByKeys>
  filters?: InputMaybe<NotificationTypeFilters>
}>

export type GetNotificationTypesQuery = {
  __typename?: 'Query'
  notificationTypes: {
    __typename?: 'NotificationTypeConnection'
    pageInfo: {
      __typename?: 'PageInfo'
      hasPreviousPage: boolean
      hasNextPage: boolean
      startCursor?: string | null
      endCursor?: string | null
    }
    edges: Array<{
      __typename?: 'NotificationTypeEdge'
      cursor: string
      node: {
        __typename?: 'NotificationType'
        id: string
        appId: string
        name: string
        description: string
        notificationCenterTitle?: string | null
        notificationCenterBody?: string | null
        notificationCenterIcon?: string | null
        emailTemplateSubject?: string | null
        emailTemplateText?: string | null
        emailTemplateHtmlPath?: string | null
        tempEmailTemplateHtml?: string | null
        smsTemplate?: string | null
        webPushTemplate?: any | null
        notificationCenterEnabled: boolean
        emailEnabled: boolean
        smsEnabled: boolean
        webPushEnabled: boolean
        active: boolean
        createdAt: any
        updatedAt: any
      }
    }>
    nodes: Array<{
      __typename?: 'NotificationType'
      id: string
      appId: string
      name: string
      description: string
      notificationCenterTitle?: string | null
      notificationCenterBody?: string | null
      notificationCenterIcon?: string | null
      emailTemplateSubject?: string | null
      emailTemplateText?: string | null
      emailTemplateHtmlPath?: string | null
      tempEmailTemplateHtml?: string | null
      smsTemplate?: string | null
      webPushTemplate?: any | null
      notificationCenterEnabled: boolean
      emailEnabled: boolean
      smsEnabled: boolean
      webPushEnabled: boolean
      active: boolean
      createdAt: any
      updatedAt: any
    }>
  }
}

export type GetNotificationTypesCountQueryVariables = Exact<{ [key: string]: never }>

export type GetNotificationTypesCountQuery = { __typename?: 'Query'; notificationTypesCount: number }

export type GetNotificationsQueryVariables = Exact<{
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  revert?: InputMaybe<Scalars['Boolean']>
  sortBy?: InputMaybe<NotificationSortByKeys>
  filters?: InputMaybe<NotificationFilters>
}>

export type GetNotificationsQuery = {
  __typename?: 'Query'
  notifications: {
    __typename?: 'NotificationConnection'
    pageInfo: {
      __typename?: 'PageInfo'
      hasPreviousPage: boolean
      hasNextPage: boolean
      startCursor?: string | null
      endCursor?: string | null
    }
    edges: Array<{
      __typename?: 'NotificationEdge'
      cursor: string
      node: {
        __typename?: 'Notification'
        id: string
        appId: string
        senderId?: string | null
        typeId?: string | null
        rawContent?: any | null
        rawChannels?: any | null
        replacements?: any | null
        addedToQueueAt?: any | null
        scheduledFor?: any | null
        createdAt: any
        updatedAt: any
      }
    }>
    nodes: Array<{
      __typename?: 'Notification'
      id: string
      appId: string
      senderId?: string | null
      typeId?: string | null
      rawContent?: any | null
      rawChannels?: any | null
      replacements?: any | null
      addedToQueueAt?: any | null
      scheduledFor?: any | null
      createdAt: any
      updatedAt: any
      notificationType?: { __typename?: 'NotificationType'; id: string; name: string } | null
    }>
  }
}

export type GetNotificationsCountQueryVariables = Exact<{ [key: string]: never }>

export type GetNotificationsCountQuery = { __typename?: 'Query'; notificationsCount: number }

export type GetUserQueryVariables = Exact<{
  refId?: InputMaybe<Scalars['ID']>
  id?: InputMaybe<Scalars['ID']>
}>

export type GetUserQuery = {
  __typename?: 'Query'
  user?: {
    __typename?: 'User'
    id: string
    appId: string
    refId: string
    createdAt: any
    updatedAt: any
    app?: {
      __typename?: 'App'
      id: string
      name: string
      apiKeyCreatedAt?: any | null
      enabledOrigin?: string | null
      active: boolean
      createdAt: any
      updatedAt: any
      hasApiKey: boolean
    } | null
    channels: Array<{
      __typename?: 'UserChannel'
      id: string
      channel: Channel
      details: any
      active: boolean
      createdAt: any
      updatedAt: any
    }>
  } | null
}

export type GetUserChannelQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type GetUserChannelQuery = {
  __typename?: 'Query'
  userChannel?: {
    __typename?: 'UserChannel'
    id: string
    channel: Channel
    details: any
    active: boolean
    createdAt: any
    updatedAt: any
  } | null
}

export type GetUserChannelsQueryVariables = Exact<{
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  revert?: InputMaybe<Scalars['Boolean']>
  sortBy?: InputMaybe<UserChannelSortByKeys>
  filters?: InputMaybe<UserChannelFilters>
}>

export type GetUserChannelsQuery = {
  __typename?: 'Query'
  userChannels: {
    __typename?: 'UserChannelConnection'
    pageInfo: {
      __typename?: 'PageInfo'
      hasPreviousPage: boolean
      hasNextPage: boolean
      startCursor?: string | null
      endCursor?: string | null
    }
    edges: Array<{
      __typename?: 'UserChannelEdge'
      cursor: string
      node: {
        __typename?: 'UserChannel'
        id: string
        channel: Channel
        details: any
        active: boolean
        createdAt: any
        updatedAt: any
      }
    }>
    nodes: Array<{
      __typename?: 'UserChannel'
      id: string
      channel: Channel
      details: any
      active: boolean
      createdAt: any
      updatedAt: any
    }>
  }
}

export type GetUserChannelsCountQueryVariables = Exact<{ [key: string]: never }>

export type GetUserChannelsCountQuery = { __typename?: 'Query'; userChannelsCount: number }

export type GetUsersQueryVariables = Exact<{
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  revert?: InputMaybe<Scalars['Boolean']>
  sortBy?: InputMaybe<UserSortByKeys>
  filters?: InputMaybe<UserFilters>
}>

export type GetUsersQuery = {
  __typename?: 'Query'
  users: {
    __typename?: 'UserConnection'
    pageInfo: {
      __typename?: 'PageInfo'
      hasPreviousPage: boolean
      hasNextPage: boolean
      startCursor?: string | null
      endCursor?: string | null
    }
    edges: Array<{
      __typename?: 'UserEdge'
      cursor: string
      node: { __typename?: 'User'; id: string; appId: string; refId: string; createdAt: any; updatedAt: any }
    }>
    nodes: Array<{ __typename?: 'User'; id: string; appId: string; refId: string; createdAt: any; updatedAt: any }>
  }
}

export type GetUsersCountQueryVariables = Exact<{
  filters?: InputMaybe<UserFilters>
}>

export type GetUsersCountQuery = { __typename?: 'Query'; usersCount: number }

export type GetUsersWithCountQueryVariables = Exact<{
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  revert?: InputMaybe<Scalars['Boolean']>
  sortBy?: InputMaybe<UserSortByKeys>
  filters?: InputMaybe<UserFilters>
}>

export type GetUsersWithCountQuery = {
  __typename?: 'Query'
  count: number
  users: {
    __typename?: 'UserConnection'
    pageInfo: {
      __typename?: 'PageInfo'
      hasPreviousPage: boolean
      hasNextPage: boolean
      startCursor?: string | null
      endCursor?: string | null
    }
    edges: Array<{
      __typename?: 'UserEdge'
      cursor: string
      node: {
        __typename?: 'User'
        id: string
        appId: string
        refId: string
        createdAt: any
        updatedAt: any
        channels: Array<{
          __typename?: 'UserChannel'
          id: string
          channel: Channel
          details: any
          active: boolean
          createdAt: any
          updatedAt: any
        }>
      }
    }>
    nodes: Array<{
      __typename?: 'User'
      id: string
      appId: string
      refId: string
      createdAt: any
      updatedAt: any
      channels: Array<{
        __typename?: 'UserChannel'
        id: string
        channel: Channel
        details: any
        active: boolean
        createdAt: any
        updatedAt: any
      }>
    }>
  }
}

export type SaveUserMutationVariables = Exact<{
  id?: InputMaybe<Scalars['ID']>
  refId?: InputMaybe<Scalars['ID']>
  data: SaveUserData
}>

export type SaveUserMutation = {
  __typename?: 'Mutation'
  saveUser: {
    __typename?: 'User'
    id: string
    appId: string
    refId: string
    createdAt: any
    updatedAt: any
    app?: {
      __typename?: 'App'
      id: string
      name: string
      apiKeyCreatedAt?: any | null
      enabledOrigin?: string | null
      active: boolean
      createdAt: any
      updatedAt: any
      hasApiKey: boolean
    } | null
    channels: Array<{
      __typename?: 'UserChannel'
      id: string
      channel: Channel
      details: any
      active: boolean
      createdAt: any
      updatedAt: any
    }>
  }
}

export type SendMutationVariables = Exact<{
  notification?: InputMaybe<CreateNotificationData>
  notificationId?: InputMaybe<Scalars['ID']>
}>

export type SendMutation = {
  __typename?: 'Mutation'
  send: {
    __typename?: 'Notification'
    id: string
    appId: string
    senderId?: string | null
    typeId?: string | null
    rawContent?: any | null
    rawChannels?: any | null
    replacements?: any | null
    addedToQueueAt?: any | null
    scheduledFor?: any | null
    createdAt: any
    updatedAt: any
    notificationType?: { __typename?: 'NotificationType'; id: string; name: string } | null
  }
}

export type UpdateNotificationTypeMutationVariables = Exact<{
  id: Scalars['ID']
  data: UpdateNotificationTypeData
}>

export type UpdateNotificationTypeMutation = {
  __typename?: 'Mutation'
  updateNotificationType: {
    __typename?: 'NotificationType'
    id: string
    appId: string
    name: string
    description: string
    notificationCenterTitle?: string | null
    notificationCenterBody?: string | null
    notificationCenterIcon?: string | null
    emailTemplateSubject?: string | null
    emailTemplateText?: string | null
    emailTemplateHtmlPath?: string | null
    tempEmailTemplateHtml?: string | null
    smsTemplate?: string | null
    webPushTemplate?: any | null
    notificationCenterEnabled: boolean
    emailEnabled: boolean
    smsEnabled: boolean
    webPushEnabled: boolean
    active: boolean
    createdAt: any
    updatedAt: any
  }
}

export type UpdateUserMutationVariables = Exact<{
  refId: Scalars['ID']
  data: UpdateUserData
}>

export type UpdateUserMutation = {
  __typename?: 'Mutation'
  updateUser: {
    __typename?: 'User'
    id: string
    appId: string
    refId: string
    createdAt: any
    updatedAt: any
    app?: {
      __typename?: 'App'
      id: string
      name: string
      apiKeyCreatedAt?: any | null
      enabledOrigin?: string | null
      active: boolean
      createdAt: any
      updatedAt: any
      hasApiKey: boolean
    } | null
    channels: Array<{
      __typename?: 'UserChannel'
      id: string
      channel: Channel
      details: any
      active: boolean
      createdAt: any
      updatedAt: any
    }>
  }
}

export type UpdateUserChannelMutationVariables = Exact<{
  id: Scalars['ID']
  data: UpdateUserChannelData
}>

export type UpdateUserChannelMutation = {
  __typename?: 'Mutation'
  updateUserChannel: {
    __typename?: 'UserChannel'
    id: string
    channel: Channel
    details: any
    active: boolean
    createdAt: any
    updatedAt: any
  }
}

export const AppFragmentFragmentDoc = gql`
  fragment AppFragment on App {
    id
    name
    apiKeyCreatedAt
    enabledOrigin
    active
    createdAt
    updatedAt
    hasApiKey
  }
`
export const NotificationFragmentFragmentDoc = gql`
  fragment NotificationFragment on Notification {
    id
    appId
    senderId
    typeId
    rawContent
    rawChannels
    replacements
    addedToQueueAt
    scheduledFor
    createdAt
    updatedAt
  }
`
export const NotificationRecipientFragmentFragmentDoc = gql`
  fragment NotificationRecipientFragment on NotificationRecipient {
    id
    notificationId
    userId
    sentAt
    readAt
    createdAt
    updatedAt
  }
`
export const NotificationTypeFragmentFragmentDoc = gql`
  fragment NotificationTypeFragment on NotificationType {
    id
    appId
    name
    description
    notificationCenterTitle
    notificationCenterBody
    notificationCenterIcon
    notificationCenterIcon
    emailTemplateSubject
    emailTemplateText
    emailTemplateHtmlPath
    tempEmailTemplateHtml
    smsTemplate
    webPushTemplate
    notificationCenterEnabled
    emailEnabled
    smsEnabled
    webPushEnabled
    active
    createdAt
    updatedAt
  }
`
export const PageInfoFragmentFragmentDoc = gql`
  fragment PageInfoFragment on PageInfo {
    hasPreviousPage
    hasNextPage
    startCursor
    endCursor
  }
`
export const UserChannelFragmentFragmentDoc = gql`
  fragment UserChannelFragment on UserChannel {
    id
    channel
    details
    active
    createdAt
    updatedAt
  }
`
export const UserFragmentFragmentDoc = gql`
  fragment UserFragment on User {
    id
    appId
    refId
    createdAt
    updatedAt
  }
`
export const CreateNotificationDocument = gql`
  mutation createNotification($data: CreateNotificationData!) {
    createNotification(data: $data) {
      ...NotificationFragment
      notificationType {
        id
        name
      }
    }
  }
  ${NotificationFragmentFragmentDoc}
`
export const CreateNotificationTypeDocument = gql`
  mutation createNotificationType($data: CreateNotificationTypeData!) {
    createNotificationType(data: $data) {
      ...NotificationTypeFragment
    }
  }
  ${NotificationTypeFragmentFragmentDoc}
`
export const CreateUserDocument = gql`
  mutation createUser($data: CreateUserData!) {
    createUser(data: $data) {
      ...UserFragment
      app {
        ...AppFragment
      }
      channels {
        ...UserChannelFragment
      }
    }
  }
  ${UserFragmentFragmentDoc}
  ${AppFragmentFragmentDoc}
  ${UserChannelFragmentFragmentDoc}
`
export const CreateUserChannelDocument = gql`
  mutation createUserChannel($data: CreateUserChannelData!) {
    createUserChannel(data: $data) {
      ...UserChannelFragment
    }
  }
  ${UserChannelFragmentFragmentDoc}
`
export const DeleteNotificationDocument = gql`
  mutation deleteNotification($id: ID!) {
    deleteNotification(id: $id)
  }
`
export const DeleteNotificationTypeDocument = gql`
  mutation deleteNotificationType($id: ID!) {
    deleteNotificationType(id: $id)
  }
`
export const DeleteUserDocument = gql`
  mutation deleteUser($id: ID, $refId: ID) {
    deleteUser(id: $id, refId: $refId)
  }
`
export const DeleteUserChannelDocument = gql`
  mutation deleteUserChannel($id: ID!) {
    deleteUserChannel(id: $id)
  }
`
export const GenerateUserTokenDocument = gql`
  mutation generateUserToken($id: ID, $refId: ID) {
    generateUserToken(id: $id, refId: $refId)
  }
`
export const GetNotificationDocument = gql`
  query getNotification($id: ID!) {
    notification(id: $id) {
      ...NotificationFragment
      notificationType {
        id
        name
      }
    }
  }
  ${NotificationFragmentFragmentDoc}
`
export const GetNotificationTypeDocument = gql`
  query getNotificationType($id: ID!) {
    notificationType(id: $id) {
      ...NotificationTypeFragment
    }
  }
  ${NotificationTypeFragmentFragmentDoc}
`
export const GetNotificationTypesDocument = gql`
  query getNotificationTypes(
    $after: String
    $before: String
    $first: Int
    $last: Int
    $revert: Boolean
    $sortBy: NotificationTypeSortByKeys
    $filters: NotificationTypeFilters
  ) {
    notificationTypes(
      after: $after
      before: $before
      first: $first
      last: $last
      revert: $revert
      sortBy: $sortBy
      filters: $filters
    ) {
      pageInfo {
        ...PageInfoFragment
      }
      edges {
        cursor
        node {
          ...NotificationTypeFragment
        }
      }
      nodes {
        ...NotificationTypeFragment
      }
    }
  }
  ${PageInfoFragmentFragmentDoc}
  ${NotificationTypeFragmentFragmentDoc}
`
export const GetNotificationTypesCountDocument = gql`
  query getNotificationTypesCount {
    notificationTypesCount
  }
`
export const GetNotificationsDocument = gql`
  query getNotifications(
    $after: String
    $before: String
    $first: Int
    $last: Int
    $revert: Boolean
    $sortBy: NotificationSortByKeys
    $filters: NotificationFilters
  ) {
    notifications(
      after: $after
      before: $before
      first: $first
      last: $last
      revert: $revert
      sortBy: $sortBy
      filters: $filters
    ) {
      pageInfo {
        ...PageInfoFragment
      }
      edges {
        cursor
        node {
          ...NotificationFragment
        }
      }
      nodes {
        ...NotificationFragment
        notificationType {
          id
          name
        }
      }
    }
  }
  ${PageInfoFragmentFragmentDoc}
  ${NotificationFragmentFragmentDoc}
`
export const GetNotificationsCountDocument = gql`
  query getNotificationsCount {
    notificationsCount
  }
`
export const GetUserDocument = gql`
  query getUser($refId: ID, $id: ID) {
    user(refId: $refId, id: $id) {
      ...UserFragment
      app {
        ...AppFragment
      }
      channels {
        ...UserChannelFragment
      }
    }
  }
  ${UserFragmentFragmentDoc}
  ${AppFragmentFragmentDoc}
  ${UserChannelFragmentFragmentDoc}
`
export const GetUserChannelDocument = gql`
  query getUserChannel($id: ID!) {
    userChannel(id: $id) {
      ...UserChannelFragment
    }
  }
  ${UserChannelFragmentFragmentDoc}
`
export const GetUserChannelsDocument = gql`
  query getUserChannels(
    $after: String
    $before: String
    $first: Int
    $last: Int
    $revert: Boolean
    $sortBy: UserChannelSortByKeys
    $filters: UserChannelFilters
  ) {
    userChannels(
      after: $after
      before: $before
      first: $first
      last: $last
      revert: $revert
      sortBy: $sortBy
      filters: $filters
    ) {
      pageInfo {
        ...PageInfoFragment
      }
      edges {
        cursor
        node {
          ...UserChannelFragment
        }
      }
      nodes {
        ...UserChannelFragment
      }
    }
  }
  ${PageInfoFragmentFragmentDoc}
  ${UserChannelFragmentFragmentDoc}
`
export const GetUserChannelsCountDocument = gql`
  query getUserChannelsCount {
    userChannelsCount
  }
`
export const GetUsersDocument = gql`
  query getUsers(
    $after: String
    $before: String
    $first: Int
    $last: Int
    $revert: Boolean
    $sortBy: UserSortByKeys
    $filters: UserFilters
  ) {
    users(
      after: $after
      before: $before
      first: $first
      last: $last
      revert: $revert
      sortBy: $sortBy
      filters: $filters
    ) {
      pageInfo {
        ...PageInfoFragment
      }
      edges {
        cursor
        node {
          ...UserFragment
        }
      }
      nodes {
        ...UserFragment
      }
    }
  }
  ${PageInfoFragmentFragmentDoc}
  ${UserFragmentFragmentDoc}
`
export const GetUsersCountDocument = gql`
  query getUsersCount($filters: UserFilters) {
    usersCount(filters: $filters)
  }
`
export const GetUsersWithCountDocument = gql`
  query getUsersWithCount(
    $after: String
    $before: String
    $first: Int
    $last: Int
    $revert: Boolean
    $sortBy: UserSortByKeys
    $filters: UserFilters
  ) {
    count: usersCount(filters: $filters)
    users(
      after: $after
      before: $before
      first: $first
      last: $last
      revert: $revert
      sortBy: $sortBy
      filters: $filters
    ) {
      pageInfo {
        ...PageInfoFragment
      }
      edges {
        cursor
        node {
          ...UserFragment
          channels {
            ...UserChannelFragment
          }
        }
      }
      nodes {
        ...UserFragment
        channels {
          ...UserChannelFragment
        }
      }
    }
  }
  ${PageInfoFragmentFragmentDoc}
  ${UserFragmentFragmentDoc}
  ${UserChannelFragmentFragmentDoc}
`
export const SaveUserDocument = gql`
  mutation saveUser($id: ID, $refId: ID, $data: SaveUserData!) {
    saveUser(id: $id, refId: $refId, data: $data) {
      ...UserFragment
      app {
        ...AppFragment
      }
      channels {
        ...UserChannelFragment
      }
    }
  }
  ${UserFragmentFragmentDoc}
  ${AppFragmentFragmentDoc}
  ${UserChannelFragmentFragmentDoc}
`
export const SendDocument = gql`
  mutation send($notification: CreateNotificationData, $notificationId: ID) {
    send(notification: $notification, notificationId: $notificationId) {
      ...NotificationFragment
      notificationType {
        id
        name
      }
    }
  }
  ${NotificationFragmentFragmentDoc}
`
export const UpdateNotificationTypeDocument = gql`
  mutation updateNotificationType($id: ID!, $data: UpdateNotificationTypeData!) {
    updateNotificationType(id: $id, data: $data) {
      ...NotificationTypeFragment
    }
  }
  ${NotificationTypeFragmentFragmentDoc}
`
export const UpdateUserDocument = gql`
  mutation updateUser($refId: ID!, $data: UpdateUserData!) {
    updateUser(refId: $refId, data: $data) {
      ...UserFragment
      app {
        ...AppFragment
      }
      channels {
        ...UserChannelFragment
      }
    }
  }
  ${UserFragmentFragmentDoc}
  ${AppFragmentFragmentDoc}
  ${UserChannelFragmentFragmentDoc}
`
export const UpdateUserChannelDocument = gql`
  mutation updateUserChannel($id: ID!, $data: UpdateUserChannelData!) {
    updateUserChannel(id: $id, data: $data) {
      ...UserChannelFragment
    }
  }
  ${UserChannelFragmentFragmentDoc}
`

export type SdkFunctionWrapper = <T>(
  action: (requestHeaders?: Record<string, string>) => Promise<T>,
  operationName: string,
  operationType?: string
) => Promise<T>

const defaultWrapper: SdkFunctionWrapper = (action, _operationName, _operationType) => action()

export function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {
  return {
    createNotification(
      variables: CreateNotificationMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<CreateNotificationMutation> {
      return withWrapper(
        (wrappedRequestHeaders) =>
          client.request<CreateNotificationMutation>(CreateNotificationDocument, variables, {
            ...requestHeaders,
            ...wrappedRequestHeaders,
          }),
        'createNotification',
        'mutation'
      )
    },
    createNotificationType(
      variables: CreateNotificationTypeMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<CreateNotificationTypeMutation> {
      return withWrapper(
        (wrappedRequestHeaders) =>
          client.request<CreateNotificationTypeMutation>(CreateNotificationTypeDocument, variables, {
            ...requestHeaders,
            ...wrappedRequestHeaders,
          }),
        'createNotificationType',
        'mutation'
      )
    },
    createUser(
      variables: CreateUserMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<CreateUserMutation> {
      return withWrapper(
        (wrappedRequestHeaders) =>
          client.request<CreateUserMutation>(CreateUserDocument, variables, {
            ...requestHeaders,
            ...wrappedRequestHeaders,
          }),
        'createUser',
        'mutation'
      )
    },
    createUserChannel(
      variables: CreateUserChannelMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<CreateUserChannelMutation> {
      return withWrapper(
        (wrappedRequestHeaders) =>
          client.request<CreateUserChannelMutation>(CreateUserChannelDocument, variables, {
            ...requestHeaders,
            ...wrappedRequestHeaders,
          }),
        'createUserChannel',
        'mutation'
      )
    },
    deleteNotification(
      variables: DeleteNotificationMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<DeleteNotificationMutation> {
      return withWrapper(
        (wrappedRequestHeaders) =>
          client.request<DeleteNotificationMutation>(DeleteNotificationDocument, variables, {
            ...requestHeaders,
            ...wrappedRequestHeaders,
          }),
        'deleteNotification',
        'mutation'
      )
    },
    deleteNotificationType(
      variables: DeleteNotificationTypeMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<DeleteNotificationTypeMutation> {
      return withWrapper(
        (wrappedRequestHeaders) =>
          client.request<DeleteNotificationTypeMutation>(DeleteNotificationTypeDocument, variables, {
            ...requestHeaders,
            ...wrappedRequestHeaders,
          }),
        'deleteNotificationType',
        'mutation'
      )
    },
    deleteUser(
      variables?: DeleteUserMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<DeleteUserMutation> {
      return withWrapper(
        (wrappedRequestHeaders) =>
          client.request<DeleteUserMutation>(DeleteUserDocument, variables, {
            ...requestHeaders,
            ...wrappedRequestHeaders,
          }),
        'deleteUser',
        'mutation'
      )
    },
    deleteUserChannel(
      variables: DeleteUserChannelMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<DeleteUserChannelMutation> {
      return withWrapper(
        (wrappedRequestHeaders) =>
          client.request<DeleteUserChannelMutation>(DeleteUserChannelDocument, variables, {
            ...requestHeaders,
            ...wrappedRequestHeaders,
          }),
        'deleteUserChannel',
        'mutation'
      )
    },
    generateUserToken(
      variables?: GenerateUserTokenMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<GenerateUserTokenMutation> {
      return withWrapper(
        (wrappedRequestHeaders) =>
          client.request<GenerateUserTokenMutation>(GenerateUserTokenDocument, variables, {
            ...requestHeaders,
            ...wrappedRequestHeaders,
          }),
        'generateUserToken',
        'mutation'
      )
    },
    getNotification(
      variables: GetNotificationQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<GetNotificationQuery> {
      return withWrapper(
        (wrappedRequestHeaders) =>
          client.request<GetNotificationQuery>(GetNotificationDocument, variables, {
            ...requestHeaders,
            ...wrappedRequestHeaders,
          }),
        'getNotification',
        'query'
      )
    },
    getNotificationType(
      variables: GetNotificationTypeQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<GetNotificationTypeQuery> {
      return withWrapper(
        (wrappedRequestHeaders) =>
          client.request<GetNotificationTypeQuery>(GetNotificationTypeDocument, variables, {
            ...requestHeaders,
            ...wrappedRequestHeaders,
          }),
        'getNotificationType',
        'query'
      )
    },
    getNotificationTypes(
      variables?: GetNotificationTypesQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<GetNotificationTypesQuery> {
      return withWrapper(
        (wrappedRequestHeaders) =>
          client.request<GetNotificationTypesQuery>(GetNotificationTypesDocument, variables, {
            ...requestHeaders,
            ...wrappedRequestHeaders,
          }),
        'getNotificationTypes',
        'query'
      )
    },
    getNotificationTypesCount(
      variables?: GetNotificationTypesCountQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<GetNotificationTypesCountQuery> {
      return withWrapper(
        (wrappedRequestHeaders) =>
          client.request<GetNotificationTypesCountQuery>(GetNotificationTypesCountDocument, variables, {
            ...requestHeaders,
            ...wrappedRequestHeaders,
          }),
        'getNotificationTypesCount',
        'query'
      )
    },
    getNotifications(
      variables?: GetNotificationsQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<GetNotificationsQuery> {
      return withWrapper(
        (wrappedRequestHeaders) =>
          client.request<GetNotificationsQuery>(GetNotificationsDocument, variables, {
            ...requestHeaders,
            ...wrappedRequestHeaders,
          }),
        'getNotifications',
        'query'
      )
    },
    getNotificationsCount(
      variables?: GetNotificationsCountQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<GetNotificationsCountQuery> {
      return withWrapper(
        (wrappedRequestHeaders) =>
          client.request<GetNotificationsCountQuery>(GetNotificationsCountDocument, variables, {
            ...requestHeaders,
            ...wrappedRequestHeaders,
          }),
        'getNotificationsCount',
        'query'
      )
    },
    getUser(variables?: GetUserQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<GetUserQuery> {
      return withWrapper(
        (wrappedRequestHeaders) =>
          client.request<GetUserQuery>(GetUserDocument, variables, { ...requestHeaders, ...wrappedRequestHeaders }),
        'getUser',
        'query'
      )
    },
    getUserChannel(
      variables: GetUserChannelQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<GetUserChannelQuery> {
      return withWrapper(
        (wrappedRequestHeaders) =>
          client.request<GetUserChannelQuery>(GetUserChannelDocument, variables, {
            ...requestHeaders,
            ...wrappedRequestHeaders,
          }),
        'getUserChannel',
        'query'
      )
    },
    getUserChannels(
      variables?: GetUserChannelsQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<GetUserChannelsQuery> {
      return withWrapper(
        (wrappedRequestHeaders) =>
          client.request<GetUserChannelsQuery>(GetUserChannelsDocument, variables, {
            ...requestHeaders,
            ...wrappedRequestHeaders,
          }),
        'getUserChannels',
        'query'
      )
    },
    getUserChannelsCount(
      variables?: GetUserChannelsCountQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<GetUserChannelsCountQuery> {
      return withWrapper(
        (wrappedRequestHeaders) =>
          client.request<GetUserChannelsCountQuery>(GetUserChannelsCountDocument, variables, {
            ...requestHeaders,
            ...wrappedRequestHeaders,
          }),
        'getUserChannelsCount',
        'query'
      )
    },
    getUsers(variables?: GetUsersQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<GetUsersQuery> {
      return withWrapper(
        (wrappedRequestHeaders) =>
          client.request<GetUsersQuery>(GetUsersDocument, variables, { ...requestHeaders, ...wrappedRequestHeaders }),
        'getUsers',
        'query'
      )
    },
    getUsersCount(
      variables?: GetUsersCountQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<GetUsersCountQuery> {
      return withWrapper(
        (wrappedRequestHeaders) =>
          client.request<GetUsersCountQuery>(GetUsersCountDocument, variables, {
            ...requestHeaders,
            ...wrappedRequestHeaders,
          }),
        'getUsersCount',
        'query'
      )
    },
    getUsersWithCount(
      variables?: GetUsersWithCountQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<GetUsersWithCountQuery> {
      return withWrapper(
        (wrappedRequestHeaders) =>
          client.request<GetUsersWithCountQuery>(GetUsersWithCountDocument, variables, {
            ...requestHeaders,
            ...wrappedRequestHeaders,
          }),
        'getUsersWithCount',
        'query'
      )
    },
    saveUser(
      variables: SaveUserMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<SaveUserMutation> {
      return withWrapper(
        (wrappedRequestHeaders) =>
          client.request<SaveUserMutation>(SaveUserDocument, variables, {
            ...requestHeaders,
            ...wrappedRequestHeaders,
          }),
        'saveUser',
        'mutation'
      )
    },
    send(variables?: SendMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<SendMutation> {
      return withWrapper(
        (wrappedRequestHeaders) =>
          client.request<SendMutation>(SendDocument, variables, { ...requestHeaders, ...wrappedRequestHeaders }),
        'send',
        'mutation'
      )
    },
    updateNotificationType(
      variables: UpdateNotificationTypeMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<UpdateNotificationTypeMutation> {
      return withWrapper(
        (wrappedRequestHeaders) =>
          client.request<UpdateNotificationTypeMutation>(UpdateNotificationTypeDocument, variables, {
            ...requestHeaders,
            ...wrappedRequestHeaders,
          }),
        'updateNotificationType',
        'mutation'
      )
    },
    updateUser(
      variables: UpdateUserMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<UpdateUserMutation> {
      return withWrapper(
        (wrappedRequestHeaders) =>
          client.request<UpdateUserMutation>(UpdateUserDocument, variables, {
            ...requestHeaders,
            ...wrappedRequestHeaders,
          }),
        'updateUser',
        'mutation'
      )
    },
    updateUserChannel(
      variables: UpdateUserChannelMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<UpdateUserChannelMutation> {
      return withWrapper(
        (wrappedRequestHeaders) =>
          client.request<UpdateUserChannelMutation>(UpdateUserChannelDocument, variables, {
            ...requestHeaders,
            ...wrappedRequestHeaders,
          }),
        'updateUserChannel',
        'mutation'
      )
    },
  }
}
export type Sdk = ReturnType<typeof getSdk>
