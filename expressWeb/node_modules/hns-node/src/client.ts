import { generateJwt } from './utils/jwt'
import { GraphQLClient } from 'graphql-request'
import { getSdk, Sdk } from './gql/graphql'
import { RequestInit } from 'graphql-request/dist/types.dom'

const DEFAULT_API_URL = process.env.HNS_API_URL || 'https://hns-api.hyperting.com/graphql'

export type HNSClientConfig = {
  appId: string
  apiKey: string
  apiUrl?: string
}

export class HNSClient {
  private static _instance: HNSClient

  private _apiUrl = DEFAULT_API_URL

  private _appId?: string

  private _apiKey?: string

  private _jwt?: string

  private _lastJwtGenerationTime = 0

  private _sdk?: Sdk

  private constructor() {
    // Singleton pattern
  }

  private async generateJWT() {
    if (!this._apiKey) {
      throw new Error('API key is not set')
    }

    if (!this._appId) {
      throw new Error('App ID is not set')
    }

    this._jwt = await generateJwt(this._apiKey, this._appId)
    this._lastJwtGenerationTime = Date.now()

    if (!this._jwt) {
      throw new Error('Error while generating JWT token')
    }

    return this._jwt
  }

  static getInstance() {
    if (this._instance) {
      return this._instance
    }

    this._instance = new HNSClient()
    return this._instance
  }

  private async withToken(request: RequestInit) {
    if (!this.isInitialized()) {
      throw new Error('SDK is not initialized')
    }

    if (this.isJwtExpired()) {
      await this.generateJWT()
    }

    return {
      ...request,
      headers: { ...request.headers, Authorization: `Bearer ${this._jwt}` },
    }
  }

  public init(config: HNSClientConfig) {
    this._apiUrl = config.apiUrl || DEFAULT_API_URL
    this._appId = config.appId
    this._apiKey = config.apiKey

    const client = new GraphQLClient(this._apiUrl, {
      requestMiddleware: (request) => this.withToken(request),
    })

    this._sdk = getSdk(client)

    return this
  }

  public getSdk() {
    if (!this._sdk) {
      throw new Error('SDK is not initialized')
    }

    return this._sdk
  }

  public reset() {
    this._appId = undefined
    this._apiKey = undefined
    this._jwt = undefined
    this._sdk = undefined
  }

  public isInitialized() {
    return !!this._appId && !!this._apiKey
  }

  public isJwtExpired() {
    return !this._jwt || this._lastJwtGenerationTime + 86400 * 1000 < Date.now()
  }
}

export function initClient(config: HNSClientConfig) {
  return HNSClient.getInstance().init(config)
}

export function getClient(noSdk: boolean): HNSClient
export function getClient(): Sdk
export function getClient(noSdk?: boolean) {
  if (noSdk) {
    return HNSClient.getInstance()
  }
  return HNSClient.getInstance().getSdk()
}
