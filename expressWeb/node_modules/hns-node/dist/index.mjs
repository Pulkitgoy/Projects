// src/gql/graphql.ts
import { gql } from "graphql-request";
var Channel = /* @__PURE__ */ ((Channel2) => {
  Channel2["Email"] = "EMAIL";
  Channel2["Sms"] = "SMS";
  Channel2["WebPush"] = "WEB_PUSH";
  return Channel2;
})(Channel || {});
var AppFragmentFragmentDoc = gql`
  fragment AppFragment on App {
    id
    name
    apiKeyCreatedAt
    enabledOrigin
    active
    createdAt
    updatedAt
    hasApiKey
  }
`;
var NotificationFragmentFragmentDoc = gql`
  fragment NotificationFragment on Notification {
    id
    appId
    senderId
    typeId
    rawContent
    rawChannels
    replacements
    addedToQueueAt
    scheduledFor
    createdAt
    updatedAt
  }
`;
var NotificationRecipientFragmentFragmentDoc = gql`
  fragment NotificationRecipientFragment on NotificationRecipient {
    id
    notificationId
    userId
    sentAt
    readAt
    createdAt
    updatedAt
  }
`;
var NotificationTypeFragmentFragmentDoc = gql`
  fragment NotificationTypeFragment on NotificationType {
    id
    appId
    name
    description
    notificationCenterTitle
    notificationCenterBody
    notificationCenterIcon
    notificationCenterIcon
    emailTemplateSubject
    emailTemplateText
    emailTemplateHtmlPath
    tempEmailTemplateHtml
    smsTemplate
    webPushTemplate
    notificationCenterEnabled
    emailEnabled
    smsEnabled
    webPushEnabled
    active
    createdAt
    updatedAt
  }
`;
var PageInfoFragmentFragmentDoc = gql`
  fragment PageInfoFragment on PageInfo {
    hasPreviousPage
    hasNextPage
    startCursor
    endCursor
  }
`;
var UserChannelFragmentFragmentDoc = gql`
  fragment UserChannelFragment on UserChannel {
    id
    channel
    details
    active
    createdAt
    updatedAt
  }
`;
var UserFragmentFragmentDoc = gql`
  fragment UserFragment on User {
    id
    appId
    refId
    createdAt
    updatedAt
  }
`;
var CreateNotificationDocument = gql`
  mutation createNotification($data: CreateNotificationData!) {
    createNotification(data: $data) {
      ...NotificationFragment
      notificationType {
        id
        name
      }
    }
  }
  ${NotificationFragmentFragmentDoc}
`;
var CreateNotificationTypeDocument = gql`
  mutation createNotificationType($data: CreateNotificationTypeData!) {
    createNotificationType(data: $data) {
      ...NotificationTypeFragment
    }
  }
  ${NotificationTypeFragmentFragmentDoc}
`;
var CreateUserDocument = gql`
  mutation createUser($data: CreateUserData!) {
    createUser(data: $data) {
      ...UserFragment
      app {
        ...AppFragment
      }
      channels {
        ...UserChannelFragment
      }
    }
  }
  ${UserFragmentFragmentDoc}
  ${AppFragmentFragmentDoc}
  ${UserChannelFragmentFragmentDoc}
`;
var CreateUserChannelDocument = gql`
  mutation createUserChannel($data: CreateUserChannelData!) {
    createUserChannel(data: $data) {
      ...UserChannelFragment
    }
  }
  ${UserChannelFragmentFragmentDoc}
`;
var DeleteNotificationDocument = gql`
  mutation deleteNotification($id: ID!) {
    deleteNotification(id: $id)
  }
`;
var DeleteNotificationTypeDocument = gql`
  mutation deleteNotificationType($id: ID!) {
    deleteNotificationType(id: $id)
  }
`;
var DeleteUserDocument = gql`
  mutation deleteUser($id: ID, $refId: ID) {
    deleteUser(id: $id, refId: $refId)
  }
`;
var DeleteUserChannelDocument = gql`
  mutation deleteUserChannel($id: ID!) {
    deleteUserChannel(id: $id)
  }
`;
var GenerateUserTokenDocument = gql`
  mutation generateUserToken($id: ID, $refId: ID) {
    generateUserToken(id: $id, refId: $refId)
  }
`;
var GetNotificationDocument = gql`
  query getNotification($id: ID!) {
    notification(id: $id) {
      ...NotificationFragment
      notificationType {
        id
        name
      }
    }
  }
  ${NotificationFragmentFragmentDoc}
`;
var GetNotificationTypeDocument = gql`
  query getNotificationType($id: ID!) {
    notificationType(id: $id) {
      ...NotificationTypeFragment
    }
  }
  ${NotificationTypeFragmentFragmentDoc}
`;
var GetNotificationTypesDocument = gql`
  query getNotificationTypes(
    $after: String
    $before: String
    $first: Int
    $last: Int
    $revert: Boolean
    $sortBy: NotificationTypeSortByKeys
    $filters: NotificationTypeFilters
  ) {
    notificationTypes(
      after: $after
      before: $before
      first: $first
      last: $last
      revert: $revert
      sortBy: $sortBy
      filters: $filters
    ) {
      pageInfo {
        ...PageInfoFragment
      }
      edges {
        cursor
        node {
          ...NotificationTypeFragment
        }
      }
      nodes {
        ...NotificationTypeFragment
      }
    }
  }
  ${PageInfoFragmentFragmentDoc}
  ${NotificationTypeFragmentFragmentDoc}
`;
var GetNotificationTypesCountDocument = gql`
  query getNotificationTypesCount {
    notificationTypesCount
  }
`;
var GetNotificationsDocument = gql`
  query getNotifications(
    $after: String
    $before: String
    $first: Int
    $last: Int
    $revert: Boolean
    $sortBy: NotificationSortByKeys
    $filters: NotificationFilters
  ) {
    notifications(
      after: $after
      before: $before
      first: $first
      last: $last
      revert: $revert
      sortBy: $sortBy
      filters: $filters
    ) {
      pageInfo {
        ...PageInfoFragment
      }
      edges {
        cursor
        node {
          ...NotificationFragment
        }
      }
      nodes {
        ...NotificationFragment
        notificationType {
          id
          name
        }
      }
    }
  }
  ${PageInfoFragmentFragmentDoc}
  ${NotificationFragmentFragmentDoc}
`;
var GetNotificationsCountDocument = gql`
  query getNotificationsCount {
    notificationsCount
  }
`;
var GetUserDocument = gql`
  query getUser($refId: ID, $id: ID) {
    user(refId: $refId, id: $id) {
      ...UserFragment
      app {
        ...AppFragment
      }
      channels {
        ...UserChannelFragment
      }
    }
  }
  ${UserFragmentFragmentDoc}
  ${AppFragmentFragmentDoc}
  ${UserChannelFragmentFragmentDoc}
`;
var GetUserChannelDocument = gql`
  query getUserChannel($id: ID!) {
    userChannel(id: $id) {
      ...UserChannelFragment
    }
  }
  ${UserChannelFragmentFragmentDoc}
`;
var GetUserChannelsDocument = gql`
  query getUserChannels(
    $after: String
    $before: String
    $first: Int
    $last: Int
    $revert: Boolean
    $sortBy: UserChannelSortByKeys
    $filters: UserChannelFilters
  ) {
    userChannels(
      after: $after
      before: $before
      first: $first
      last: $last
      revert: $revert
      sortBy: $sortBy
      filters: $filters
    ) {
      pageInfo {
        ...PageInfoFragment
      }
      edges {
        cursor
        node {
          ...UserChannelFragment
        }
      }
      nodes {
        ...UserChannelFragment
      }
    }
  }
  ${PageInfoFragmentFragmentDoc}
  ${UserChannelFragmentFragmentDoc}
`;
var GetUserChannelsCountDocument = gql`
  query getUserChannelsCount {
    userChannelsCount
  }
`;
var GetUsersDocument = gql`
  query getUsers(
    $after: String
    $before: String
    $first: Int
    $last: Int
    $revert: Boolean
    $sortBy: UserSortByKeys
    $filters: UserFilters
  ) {
    users(
      after: $after
      before: $before
      first: $first
      last: $last
      revert: $revert
      sortBy: $sortBy
      filters: $filters
    ) {
      pageInfo {
        ...PageInfoFragment
      }
      edges {
        cursor
        node {
          ...UserFragment
        }
      }
      nodes {
        ...UserFragment
      }
    }
  }
  ${PageInfoFragmentFragmentDoc}
  ${UserFragmentFragmentDoc}
`;
var GetUsersCountDocument = gql`
  query getUsersCount($filters: UserFilters) {
    usersCount(filters: $filters)
  }
`;
var GetUsersWithCountDocument = gql`
  query getUsersWithCount(
    $after: String
    $before: String
    $first: Int
    $last: Int
    $revert: Boolean
    $sortBy: UserSortByKeys
    $filters: UserFilters
  ) {
    count: usersCount(filters: $filters)
    users(
      after: $after
      before: $before
      first: $first
      last: $last
      revert: $revert
      sortBy: $sortBy
      filters: $filters
    ) {
      pageInfo {
        ...PageInfoFragment
      }
      edges {
        cursor
        node {
          ...UserFragment
          channels {
            ...UserChannelFragment
          }
        }
      }
      nodes {
        ...UserFragment
        channels {
          ...UserChannelFragment
        }
      }
    }
  }
  ${PageInfoFragmentFragmentDoc}
  ${UserFragmentFragmentDoc}
  ${UserChannelFragmentFragmentDoc}
`;
var SaveUserDocument = gql`
  mutation saveUser($id: ID, $refId: ID, $data: SaveUserData!) {
    saveUser(id: $id, refId: $refId, data: $data) {
      ...UserFragment
      app {
        ...AppFragment
      }
      channels {
        ...UserChannelFragment
      }
    }
  }
  ${UserFragmentFragmentDoc}
  ${AppFragmentFragmentDoc}
  ${UserChannelFragmentFragmentDoc}
`;
var SendDocument = gql`
  mutation send($notification: CreateNotificationData, $notificationId: ID) {
    send(notification: $notification, notificationId: $notificationId) {
      ...NotificationFragment
      notificationType {
        id
        name
      }
    }
  }
  ${NotificationFragmentFragmentDoc}
`;
var UpdateNotificationTypeDocument = gql`
  mutation updateNotificationType($id: ID!, $data: UpdateNotificationTypeData!) {
    updateNotificationType(id: $id, data: $data) {
      ...NotificationTypeFragment
    }
  }
  ${NotificationTypeFragmentFragmentDoc}
`;
var UpdateUserDocument = gql`
  mutation updateUser($refId: ID!, $data: UpdateUserData!) {
    updateUser(refId: $refId, data: $data) {
      ...UserFragment
      app {
        ...AppFragment
      }
      channels {
        ...UserChannelFragment
      }
    }
  }
  ${UserFragmentFragmentDoc}
  ${AppFragmentFragmentDoc}
  ${UserChannelFragmentFragmentDoc}
`;
var UpdateUserChannelDocument = gql`
  mutation updateUserChannel($id: ID!, $data: UpdateUserChannelData!) {
    updateUserChannel(id: $id, data: $data) {
      ...UserChannelFragment
    }
  }
  ${UserChannelFragmentFragmentDoc}
`;
var defaultWrapper = (action, _operationName, _operationType) => action();
function getSdk(client, withWrapper = defaultWrapper) {
  return {
    createNotification(variables, requestHeaders) {
      return withWrapper(
        (wrappedRequestHeaders) => client.request(CreateNotificationDocument, variables, {
          ...requestHeaders,
          ...wrappedRequestHeaders
        }),
        "createNotification",
        "mutation"
      );
    },
    createNotificationType(variables, requestHeaders) {
      return withWrapper(
        (wrappedRequestHeaders) => client.request(CreateNotificationTypeDocument, variables, {
          ...requestHeaders,
          ...wrappedRequestHeaders
        }),
        "createNotificationType",
        "mutation"
      );
    },
    createUser(variables, requestHeaders) {
      return withWrapper(
        (wrappedRequestHeaders) => client.request(CreateUserDocument, variables, {
          ...requestHeaders,
          ...wrappedRequestHeaders
        }),
        "createUser",
        "mutation"
      );
    },
    createUserChannel(variables, requestHeaders) {
      return withWrapper(
        (wrappedRequestHeaders) => client.request(CreateUserChannelDocument, variables, {
          ...requestHeaders,
          ...wrappedRequestHeaders
        }),
        "createUserChannel",
        "mutation"
      );
    },
    deleteNotification(variables, requestHeaders) {
      return withWrapper(
        (wrappedRequestHeaders) => client.request(DeleteNotificationDocument, variables, {
          ...requestHeaders,
          ...wrappedRequestHeaders
        }),
        "deleteNotification",
        "mutation"
      );
    },
    deleteNotificationType(variables, requestHeaders) {
      return withWrapper(
        (wrappedRequestHeaders) => client.request(DeleteNotificationTypeDocument, variables, {
          ...requestHeaders,
          ...wrappedRequestHeaders
        }),
        "deleteNotificationType",
        "mutation"
      );
    },
    deleteUser(variables, requestHeaders) {
      return withWrapper(
        (wrappedRequestHeaders) => client.request(DeleteUserDocument, variables, {
          ...requestHeaders,
          ...wrappedRequestHeaders
        }),
        "deleteUser",
        "mutation"
      );
    },
    deleteUserChannel(variables, requestHeaders) {
      return withWrapper(
        (wrappedRequestHeaders) => client.request(DeleteUserChannelDocument, variables, {
          ...requestHeaders,
          ...wrappedRequestHeaders
        }),
        "deleteUserChannel",
        "mutation"
      );
    },
    generateUserToken(variables, requestHeaders) {
      return withWrapper(
        (wrappedRequestHeaders) => client.request(GenerateUserTokenDocument, variables, {
          ...requestHeaders,
          ...wrappedRequestHeaders
        }),
        "generateUserToken",
        "mutation"
      );
    },
    getNotification(variables, requestHeaders) {
      return withWrapper(
        (wrappedRequestHeaders) => client.request(GetNotificationDocument, variables, {
          ...requestHeaders,
          ...wrappedRequestHeaders
        }),
        "getNotification",
        "query"
      );
    },
    getNotificationType(variables, requestHeaders) {
      return withWrapper(
        (wrappedRequestHeaders) => client.request(GetNotificationTypeDocument, variables, {
          ...requestHeaders,
          ...wrappedRequestHeaders
        }),
        "getNotificationType",
        "query"
      );
    },
    getNotificationTypes(variables, requestHeaders) {
      return withWrapper(
        (wrappedRequestHeaders) => client.request(GetNotificationTypesDocument, variables, {
          ...requestHeaders,
          ...wrappedRequestHeaders
        }),
        "getNotificationTypes",
        "query"
      );
    },
    getNotificationTypesCount(variables, requestHeaders) {
      return withWrapper(
        (wrappedRequestHeaders) => client.request(GetNotificationTypesCountDocument, variables, {
          ...requestHeaders,
          ...wrappedRequestHeaders
        }),
        "getNotificationTypesCount",
        "query"
      );
    },
    getNotifications(variables, requestHeaders) {
      return withWrapper(
        (wrappedRequestHeaders) => client.request(GetNotificationsDocument, variables, {
          ...requestHeaders,
          ...wrappedRequestHeaders
        }),
        "getNotifications",
        "query"
      );
    },
    getNotificationsCount(variables, requestHeaders) {
      return withWrapper(
        (wrappedRequestHeaders) => client.request(GetNotificationsCountDocument, variables, {
          ...requestHeaders,
          ...wrappedRequestHeaders
        }),
        "getNotificationsCount",
        "query"
      );
    },
    getUser(variables, requestHeaders) {
      return withWrapper(
        (wrappedRequestHeaders) => client.request(GetUserDocument, variables, { ...requestHeaders, ...wrappedRequestHeaders }),
        "getUser",
        "query"
      );
    },
    getUserChannel(variables, requestHeaders) {
      return withWrapper(
        (wrappedRequestHeaders) => client.request(GetUserChannelDocument, variables, {
          ...requestHeaders,
          ...wrappedRequestHeaders
        }),
        "getUserChannel",
        "query"
      );
    },
    getUserChannels(variables, requestHeaders) {
      return withWrapper(
        (wrappedRequestHeaders) => client.request(GetUserChannelsDocument, variables, {
          ...requestHeaders,
          ...wrappedRequestHeaders
        }),
        "getUserChannels",
        "query"
      );
    },
    getUserChannelsCount(variables, requestHeaders) {
      return withWrapper(
        (wrappedRequestHeaders) => client.request(GetUserChannelsCountDocument, variables, {
          ...requestHeaders,
          ...wrappedRequestHeaders
        }),
        "getUserChannelsCount",
        "query"
      );
    },
    getUsers(variables, requestHeaders) {
      return withWrapper(
        (wrappedRequestHeaders) => client.request(GetUsersDocument, variables, { ...requestHeaders, ...wrappedRequestHeaders }),
        "getUsers",
        "query"
      );
    },
    getUsersCount(variables, requestHeaders) {
      return withWrapper(
        (wrappedRequestHeaders) => client.request(GetUsersCountDocument, variables, {
          ...requestHeaders,
          ...wrappedRequestHeaders
        }),
        "getUsersCount",
        "query"
      );
    },
    getUsersWithCount(variables, requestHeaders) {
      return withWrapper(
        (wrappedRequestHeaders) => client.request(GetUsersWithCountDocument, variables, {
          ...requestHeaders,
          ...wrappedRequestHeaders
        }),
        "getUsersWithCount",
        "query"
      );
    },
    saveUser(variables, requestHeaders) {
      return withWrapper(
        (wrappedRequestHeaders) => client.request(SaveUserDocument, variables, {
          ...requestHeaders,
          ...wrappedRequestHeaders
        }),
        "saveUser",
        "mutation"
      );
    },
    send(variables, requestHeaders) {
      return withWrapper(
        (wrappedRequestHeaders) => client.request(SendDocument, variables, { ...requestHeaders, ...wrappedRequestHeaders }),
        "send",
        "mutation"
      );
    },
    updateNotificationType(variables, requestHeaders) {
      return withWrapper(
        (wrappedRequestHeaders) => client.request(UpdateNotificationTypeDocument, variables, {
          ...requestHeaders,
          ...wrappedRequestHeaders
        }),
        "updateNotificationType",
        "mutation"
      );
    },
    updateUser(variables, requestHeaders) {
      return withWrapper(
        (wrappedRequestHeaders) => client.request(UpdateUserDocument, variables, {
          ...requestHeaders,
          ...wrappedRequestHeaders
        }),
        "updateUser",
        "mutation"
      );
    },
    updateUserChannel(variables, requestHeaders) {
      return withWrapper(
        (wrappedRequestHeaders) => client.request(UpdateUserChannelDocument, variables, {
          ...requestHeaders,
          ...wrappedRequestHeaders
        }),
        "updateUserChannel",
        "mutation"
      );
    }
  };
}

// src/utils/jwt.ts
import jwt from "jsonwebtoken";
async function generateJwt(apiKey, appId) {
  return new Promise((resolve, reject) => {
    const payload = {
      appId,
      iat: Math.floor(Date.now() / 1e3),
      aud: "app",
      random: Math.random(),
      exp: Math.floor(Date.now() / 1e3) + 86400
    };
    jwt.sign(payload, apiKey, { algorithm: "HS256" }, (err, token) => {
      if (err) {
        reject(err);
      }
      resolve(token);
    });
  });
}

// src/client.ts
import { GraphQLClient } from "graphql-request";
var DEFAULT_API_URL = process.env.HNS_API_URL || "https://hns-api.hyperting.com/graphql";
var HNSClient = class {
  constructor() {
    this._apiUrl = DEFAULT_API_URL;
    this._lastJwtGenerationTime = 0;
  }
  async generateJWT() {
    if (!this._apiKey) {
      throw new Error("API key is not set");
    }
    if (!this._appId) {
      throw new Error("App ID is not set");
    }
    this._jwt = await generateJwt(this._apiKey, this._appId);
    this._lastJwtGenerationTime = Date.now();
    if (!this._jwt) {
      throw new Error("Error while generating JWT token");
    }
    return this._jwt;
  }
  static getInstance() {
    if (this._instance) {
      return this._instance;
    }
    this._instance = new HNSClient();
    return this._instance;
  }
  async withToken(request) {
    if (!this.isInitialized()) {
      throw new Error("SDK is not initialized");
    }
    if (this.isJwtExpired()) {
      await this.generateJWT();
    }
    return {
      ...request,
      headers: { ...request.headers, Authorization: `Bearer ${this._jwt}` }
    };
  }
  init(config) {
    this._apiUrl = config.apiUrl || DEFAULT_API_URL;
    this._appId = config.appId;
    this._apiKey = config.apiKey;
    const client = new GraphQLClient(this._apiUrl, {
      requestMiddleware: (request) => this.withToken(request)
    });
    this._sdk = getSdk(client);
    return this;
  }
  getSdk() {
    if (!this._sdk) {
      throw new Error("SDK is not initialized");
    }
    return this._sdk;
  }
  reset() {
    this._appId = void 0;
    this._apiKey = void 0;
    this._jwt = void 0;
    this._sdk = void 0;
  }
  isInitialized() {
    return !!this._appId && !!this._apiKey;
  }
  isJwtExpired() {
    return !this._jwt || this._lastJwtGenerationTime + 86400 * 1e3 < Date.now();
  }
};
function initClient(config) {
  return HNSClient.getInstance().init(config);
}
function getClient(noSdk) {
  if (noSdk) {
    return HNSClient.getInstance();
  }
  return HNSClient.getInstance().getSdk();
}
export {
  Channel,
  HNSClient,
  getClient,
  initClient
};
