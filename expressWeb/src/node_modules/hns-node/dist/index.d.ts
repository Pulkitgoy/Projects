import { GraphQLClient } from 'graphql-request';
import * as Dom from 'graphql-request/dist/types.dom';

type Maybe<T> = T | null;
type InputMaybe<T> = Maybe<T>;
type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
/** All built-in and custom scalars, mapped to their actual values */
type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
    /**
     * Implement the DateTime<FixedOffset> scalar
     *
     * The input/output is a string in RFC3339 format.
     */
    DateTime: any;
    /** A scalar that can represent any JSON value. */
    JSON: any;
    /**
     * A UUID is a unique 128-bit number, stored as 16 octets. UUIDs are parsed as
     * Strings within GraphQL. UUIDs are used to assign unique identifiers to
     * entities without requiring a central allocating authority.
     *
     * # References
     *
     * * [Wikipedia: Universally Unique Identifier](http://en.wikipedia.org/wiki/Universally_unique_identifier)
     * * [RFC4122: A Universally Unique IDentifier (UUID) URN Namespace](http://tools.ietf.org/html/rfc4122)
     */
    UUID: string;
};
declare enum Channel {
    Email = "EMAIL",
    Sms = "SMS",
    WebPush = "WEB_PUSH"
}
type CreateNotificationData = {
    rawChannels?: InputMaybe<Array<NotificationRawChannelInput>>;
    rawContent?: InputMaybe<NotificationContent>;
    recipientIds?: InputMaybe<Array<Scalars['ID']>>;
    recipientRefIds?: InputMaybe<Array<Scalars['ID']>>;
    replacements?: InputMaybe<Scalars['JSON']>;
    scheduledFor?: InputMaybe<Scalars['DateTime']>;
    senderIcon?: InputMaybe<Scalars['String']>;
    senderId?: InputMaybe<Scalars['ID']>;
    senderName?: InputMaybe<Scalars['String']>;
    senderRefId?: InputMaybe<Scalars['ID']>;
    typeId?: InputMaybe<Scalars['ID']>;
    typeSlug?: InputMaybe<Scalars['String']>;
};
type CreateNotificationTypeData = {
    active?: InputMaybe<Scalars['Boolean']>;
    appId: Scalars['UUID'];
    description?: InputMaybe<Scalars['String']>;
    emailEnabled?: InputMaybe<Scalars['Boolean']>;
    emailTemplateSubject?: InputMaybe<Scalars['String']>;
    emailTemplateText?: InputMaybe<Scalars['String']>;
    name: Scalars['String'];
    notificationCenterBody?: InputMaybe<Scalars['String']>;
    notificationCenterClickUrl?: InputMaybe<Scalars['String']>;
    notificationCenterEnabled?: InputMaybe<Scalars['Boolean']>;
    notificationCenterIcon?: InputMaybe<Scalars['String']>;
    notificationCenterTitle?: InputMaybe<Scalars['String']>;
    slug: Scalars['String'];
    smsEnabled?: InputMaybe<Scalars['Boolean']>;
    smsTemplate?: InputMaybe<Scalars['String']>;
    tempEmailTemplateHtml?: InputMaybe<Scalars['String']>;
    webPushEnabled?: InputMaybe<Scalars['Boolean']>;
    webPushTemplate?: InputMaybe<Scalars['JSON']>;
};
type CreateUserChannelData = {
    active: Scalars['Boolean'];
    channel: Channel;
    details: Scalars['JSON'];
    userId: Scalars['UUID'];
};
type CreateUserChannelInput = {
    active: Scalars['Boolean'];
    channel: Channel;
    details: Scalars['JSON'];
};
type CreateUserData = {
    appId?: InputMaybe<Scalars['ID']>;
    channels: Array<CreateUserChannelInput>;
    refId: Scalars['ID'];
};
type NotificationContent = {
    emailEnabled?: InputMaybe<Scalars['Boolean']>;
    emailHtml?: InputMaybe<Scalars['String']>;
    emailSubject?: InputMaybe<Scalars['String']>;
    emailText?: InputMaybe<Scalars['String']>;
    notificationCenterBody?: InputMaybe<Scalars['String']>;
    notificationCenterClickUrl?: InputMaybe<Scalars['String']>;
    notificationCenterEnabled?: InputMaybe<Scalars['Boolean']>;
    notificationCenterIcon?: InputMaybe<Scalars['String']>;
    notificationCenterTitle?: InputMaybe<Scalars['String']>;
    smsEnabled?: InputMaybe<Scalars['Boolean']>;
    smsText?: InputMaybe<Scalars['String']>;
    webPushBadge?: InputMaybe<Scalars['String']>;
    webPushBody?: InputMaybe<Scalars['String']>;
    webPushClickUrl?: InputMaybe<Scalars['String']>;
    webPushData?: InputMaybe<Scalars['JSON']>;
    webPushDir?: InputMaybe<Scalars['String']>;
    webPushEnabled?: InputMaybe<Scalars['Boolean']>;
    webPushIcon?: InputMaybe<Scalars['String']>;
    webPushImage?: InputMaybe<Scalars['String']>;
    webPushLang?: InputMaybe<Scalars['String']>;
    webPushTag?: InputMaybe<Scalars['String']>;
    webPushTimestamp?: InputMaybe<Scalars['Int']>;
    webPushTitle?: InputMaybe<Scalars['String']>;
};
type NotificationFilters = {
    addedToQueueAt?: InputMaybe<Scalars['DateTime']>;
    appId?: InputMaybe<Scalars['ID']>;
    createdAt?: InputMaybe<Scalars['DateTime']>;
    scheduledFor?: InputMaybe<Scalars['DateTime']>;
    senderId?: InputMaybe<Scalars['ID']>;
    typeId?: InputMaybe<Scalars['ID']>;
    updatedAt?: InputMaybe<Scalars['DateTime']>;
};
type NotificationRawChannelInput = {
    channel: Channel;
    value: Scalars['JSON'];
};
declare enum NotificationSortByKeys {
    Id = "id"
}
type NotificationTypeFilters = {
    appId?: InputMaybe<Scalars['UUID']>;
    ids?: InputMaybe<Array<Scalars['UUID']>>;
    name?: InputMaybe<Scalars['String']>;
};
declare enum NotificationTypeSortByKeys {
    CreatedAt = "createdAt",
    Id = "id",
    Name = "name",
    UpdatedAt = "updatedAt"
}
type SaveUserData = {
    appId?: InputMaybe<Scalars['ID']>;
    channels?: InputMaybe<Array<UpdateUserChannelInput>>;
    refId?: InputMaybe<Scalars['ID']>;
};
type UpdateNotificationTypeData = {
    active?: InputMaybe<Scalars['Boolean']>;
    description?: InputMaybe<Scalars['String']>;
    emailEnabled?: InputMaybe<Scalars['Boolean']>;
    emailTemplateSubject?: InputMaybe<Scalars['String']>;
    emailTemplateText?: InputMaybe<Scalars['String']>;
    name?: InputMaybe<Scalars['String']>;
    notificationCenterBody?: InputMaybe<Scalars['String']>;
    notificationCenterClickUrl?: InputMaybe<Scalars['String']>;
    notificationCenterEnabled?: InputMaybe<Scalars['Boolean']>;
    notificationCenterIcon?: InputMaybe<Scalars['String']>;
    notificationCenterTitle?: InputMaybe<Scalars['String']>;
    slug?: InputMaybe<Scalars['String']>;
    smsEnabled?: InputMaybe<Scalars['Boolean']>;
    smsTemplate?: InputMaybe<Scalars['String']>;
    tempEmailTemplateHtml?: InputMaybe<Scalars['String']>;
    webPushEnabled?: InputMaybe<Scalars['Boolean']>;
    webPushTemplate?: InputMaybe<Scalars['JSON']>;
};
type UpdateUserChannelData = {
    active?: InputMaybe<Scalars['Boolean']>;
    details?: InputMaybe<Scalars['JSON']>;
};
type UpdateUserChannelInput = {
    active?: InputMaybe<Scalars['Boolean']>;
    channel?: InputMaybe<Channel>;
    details?: InputMaybe<Scalars['JSON']>;
    id?: InputMaybe<Scalars['ID']>;
    toDelete?: InputMaybe<Scalars['Boolean']>;
};
type UpdateUserData = {
    channels?: InputMaybe<Array<UpdateUserChannelInput>>;
    refId?: InputMaybe<Scalars['ID']>;
};
type UserChannelFilters = {
    active?: InputMaybe<Scalars['Boolean']>;
    channel?: InputMaybe<Channel>;
    userId?: InputMaybe<Scalars['UUID']>;
};
declare enum UserChannelSortByKeys {
    CreatedAt = "createdAt",
    Id = "id"
}
type UserFilters = {
    appId?: InputMaybe<Scalars['UUID']>;
    refId?: InputMaybe<Scalars['ID']>;
};
declare enum UserSortByKeys {
    CreatedAt = "createdAt",
    Id = "id",
    RefId = "refId"
}
type CreateNotificationMutationVariables = Exact<{
    data: CreateNotificationData;
}>;
type CreateNotificationMutation = {
    __typename?: 'Mutation';
    createNotification: {
        __typename?: 'Notification';
        id: string;
        appId: string;
        senderId?: string | null;
        typeId?: string | null;
        rawContent?: any | null;
        rawChannels?: any | null;
        replacements?: any | null;
        addedToQueueAt?: any | null;
        scheduledFor?: any | null;
        createdAt: any;
        updatedAt: any;
        notificationType?: {
            __typename?: 'NotificationType';
            id: string;
            name: string;
        } | null;
    };
};
type CreateNotificationTypeMutationVariables = Exact<{
    data: CreateNotificationTypeData;
}>;
type CreateNotificationTypeMutation = {
    __typename?: 'Mutation';
    createNotificationType: {
        __typename?: 'NotificationType';
        id: string;
        appId: string;
        name: string;
        description: string;
        notificationCenterTitle?: string | null;
        notificationCenterBody?: string | null;
        notificationCenterIcon?: string | null;
        emailTemplateSubject?: string | null;
        emailTemplateText?: string | null;
        emailTemplateHtmlPath?: string | null;
        tempEmailTemplateHtml?: string | null;
        smsTemplate?: string | null;
        webPushTemplate?: any | null;
        notificationCenterEnabled: boolean;
        emailEnabled: boolean;
        smsEnabled: boolean;
        webPushEnabled: boolean;
        active: boolean;
        createdAt: any;
        updatedAt: any;
    };
};
type CreateUserMutationVariables = Exact<{
    data: CreateUserData;
}>;
type CreateUserMutation = {
    __typename?: 'Mutation';
    createUser: {
        __typename?: 'User';
        id: string;
        appId: string;
        refId: string;
        createdAt: any;
        updatedAt: any;
        app?: {
            __typename?: 'App';
            id: string;
            name: string;
            apiKeyCreatedAt?: any | null;
            enabledOrigin?: string | null;
            active: boolean;
            createdAt: any;
            updatedAt: any;
            hasApiKey: boolean;
        } | null;
        channels: Array<{
            __typename?: 'UserChannel';
            id: string;
            channel: Channel;
            details: any;
            active: boolean;
            createdAt: any;
            updatedAt: any;
        }>;
    };
};
type CreateUserChannelMutationVariables = Exact<{
    data: CreateUserChannelData;
}>;
type CreateUserChannelMutation = {
    __typename?: 'Mutation';
    createUserChannel: {
        __typename?: 'UserChannel';
        id: string;
        channel: Channel;
        details: any;
        active: boolean;
        createdAt: any;
        updatedAt: any;
    };
};
type DeleteNotificationMutationVariables = Exact<{
    id: Scalars['ID'];
}>;
type DeleteNotificationMutation = {
    __typename?: 'Mutation';
    deleteNotification: boolean;
};
type DeleteNotificationTypeMutationVariables = Exact<{
    id: Scalars['ID'];
}>;
type DeleteNotificationTypeMutation = {
    __typename?: 'Mutation';
    deleteNotificationType: boolean;
};
type DeleteUserMutationVariables = Exact<{
    id?: InputMaybe<Scalars['ID']>;
    refId?: InputMaybe<Scalars['ID']>;
}>;
type DeleteUserMutation = {
    __typename?: 'Mutation';
    deleteUser: boolean;
};
type DeleteUserChannelMutationVariables = Exact<{
    id: Scalars['ID'];
}>;
type DeleteUserChannelMutation = {
    __typename?: 'Mutation';
    deleteUserChannel: boolean;
};
type GenerateUserTokenMutationVariables = Exact<{
    id?: InputMaybe<Scalars['ID']>;
    refId?: InputMaybe<Scalars['ID']>;
}>;
type GenerateUserTokenMutation = {
    __typename?: 'Mutation';
    generateUserToken: string;
};
type GetNotificationQueryVariables = Exact<{
    id: Scalars['ID'];
}>;
type GetNotificationQuery = {
    __typename?: 'Query';
    notification?: {
        __typename?: 'Notification';
        id: string;
        appId: string;
        senderId?: string | null;
        typeId?: string | null;
        rawContent?: any | null;
        rawChannels?: any | null;
        replacements?: any | null;
        addedToQueueAt?: any | null;
        scheduledFor?: any | null;
        createdAt: any;
        updatedAt: any;
        notificationType?: {
            __typename?: 'NotificationType';
            id: string;
            name: string;
        } | null;
    } | null;
};
type GetNotificationTypeQueryVariables = Exact<{
    id: Scalars['ID'];
}>;
type GetNotificationTypeQuery = {
    __typename?: 'Query';
    notificationType?: {
        __typename?: 'NotificationType';
        id: string;
        appId: string;
        name: string;
        description: string;
        notificationCenterTitle?: string | null;
        notificationCenterBody?: string | null;
        notificationCenterIcon?: string | null;
        emailTemplateSubject?: string | null;
        emailTemplateText?: string | null;
        emailTemplateHtmlPath?: string | null;
        tempEmailTemplateHtml?: string | null;
        smsTemplate?: string | null;
        webPushTemplate?: any | null;
        notificationCenterEnabled: boolean;
        emailEnabled: boolean;
        smsEnabled: boolean;
        webPushEnabled: boolean;
        active: boolean;
        createdAt: any;
        updatedAt: any;
    } | null;
};
type GetNotificationTypesQueryVariables = Exact<{
    after?: InputMaybe<Scalars['String']>;
    before?: InputMaybe<Scalars['String']>;
    first?: InputMaybe<Scalars['Int']>;
    last?: InputMaybe<Scalars['Int']>;
    revert?: InputMaybe<Scalars['Boolean']>;
    sortBy?: InputMaybe<NotificationTypeSortByKeys>;
    filters?: InputMaybe<NotificationTypeFilters>;
}>;
type GetNotificationTypesQuery = {
    __typename?: 'Query';
    notificationTypes: {
        __typename?: 'NotificationTypeConnection';
        pageInfo: {
            __typename?: 'PageInfo';
            hasPreviousPage: boolean;
            hasNextPage: boolean;
            startCursor?: string | null;
            endCursor?: string | null;
        };
        edges: Array<{
            __typename?: 'NotificationTypeEdge';
            cursor: string;
            node: {
                __typename?: 'NotificationType';
                id: string;
                appId: string;
                name: string;
                description: string;
                notificationCenterTitle?: string | null;
                notificationCenterBody?: string | null;
                notificationCenterIcon?: string | null;
                emailTemplateSubject?: string | null;
                emailTemplateText?: string | null;
                emailTemplateHtmlPath?: string | null;
                tempEmailTemplateHtml?: string | null;
                smsTemplate?: string | null;
                webPushTemplate?: any | null;
                notificationCenterEnabled: boolean;
                emailEnabled: boolean;
                smsEnabled: boolean;
                webPushEnabled: boolean;
                active: boolean;
                createdAt: any;
                updatedAt: any;
            };
        }>;
        nodes: Array<{
            __typename?: 'NotificationType';
            id: string;
            appId: string;
            name: string;
            description: string;
            notificationCenterTitle?: string | null;
            notificationCenterBody?: string | null;
            notificationCenterIcon?: string | null;
            emailTemplateSubject?: string | null;
            emailTemplateText?: string | null;
            emailTemplateHtmlPath?: string | null;
            tempEmailTemplateHtml?: string | null;
            smsTemplate?: string | null;
            webPushTemplate?: any | null;
            notificationCenterEnabled: boolean;
            emailEnabled: boolean;
            smsEnabled: boolean;
            webPushEnabled: boolean;
            active: boolean;
            createdAt: any;
            updatedAt: any;
        }>;
    };
};
type GetNotificationTypesCountQueryVariables = Exact<{
    [key: string]: never;
}>;
type GetNotificationTypesCountQuery = {
    __typename?: 'Query';
    notificationTypesCount: number;
};
type GetNotificationsQueryVariables = Exact<{
    after?: InputMaybe<Scalars['String']>;
    before?: InputMaybe<Scalars['String']>;
    first?: InputMaybe<Scalars['Int']>;
    last?: InputMaybe<Scalars['Int']>;
    revert?: InputMaybe<Scalars['Boolean']>;
    sortBy?: InputMaybe<NotificationSortByKeys>;
    filters?: InputMaybe<NotificationFilters>;
}>;
type GetNotificationsQuery = {
    __typename?: 'Query';
    notifications: {
        __typename?: 'NotificationConnection';
        pageInfo: {
            __typename?: 'PageInfo';
            hasPreviousPage: boolean;
            hasNextPage: boolean;
            startCursor?: string | null;
            endCursor?: string | null;
        };
        edges: Array<{
            __typename?: 'NotificationEdge';
            cursor: string;
            node: {
                __typename?: 'Notification';
                id: string;
                appId: string;
                senderId?: string | null;
                typeId?: string | null;
                rawContent?: any | null;
                rawChannels?: any | null;
                replacements?: any | null;
                addedToQueueAt?: any | null;
                scheduledFor?: any | null;
                createdAt: any;
                updatedAt: any;
            };
        }>;
        nodes: Array<{
            __typename?: 'Notification';
            id: string;
            appId: string;
            senderId?: string | null;
            typeId?: string | null;
            rawContent?: any | null;
            rawChannels?: any | null;
            replacements?: any | null;
            addedToQueueAt?: any | null;
            scheduledFor?: any | null;
            createdAt: any;
            updatedAt: any;
            notificationType?: {
                __typename?: 'NotificationType';
                id: string;
                name: string;
            } | null;
        }>;
    };
};
type GetNotificationsCountQueryVariables = Exact<{
    [key: string]: never;
}>;
type GetNotificationsCountQuery = {
    __typename?: 'Query';
    notificationsCount: number;
};
type GetUserQueryVariables = Exact<{
    refId?: InputMaybe<Scalars['ID']>;
    id?: InputMaybe<Scalars['ID']>;
}>;
type GetUserQuery = {
    __typename?: 'Query';
    user?: {
        __typename?: 'User';
        id: string;
        appId: string;
        refId: string;
        createdAt: any;
        updatedAt: any;
        app?: {
            __typename?: 'App';
            id: string;
            name: string;
            apiKeyCreatedAt?: any | null;
            enabledOrigin?: string | null;
            active: boolean;
            createdAt: any;
            updatedAt: any;
            hasApiKey: boolean;
        } | null;
        channels: Array<{
            __typename?: 'UserChannel';
            id: string;
            channel: Channel;
            details: any;
            active: boolean;
            createdAt: any;
            updatedAt: any;
        }>;
    } | null;
};
type GetUserChannelQueryVariables = Exact<{
    id: Scalars['ID'];
}>;
type GetUserChannelQuery = {
    __typename?: 'Query';
    userChannel?: {
        __typename?: 'UserChannel';
        id: string;
        channel: Channel;
        details: any;
        active: boolean;
        createdAt: any;
        updatedAt: any;
    } | null;
};
type GetUserChannelsQueryVariables = Exact<{
    after?: InputMaybe<Scalars['String']>;
    before?: InputMaybe<Scalars['String']>;
    first?: InputMaybe<Scalars['Int']>;
    last?: InputMaybe<Scalars['Int']>;
    revert?: InputMaybe<Scalars['Boolean']>;
    sortBy?: InputMaybe<UserChannelSortByKeys>;
    filters?: InputMaybe<UserChannelFilters>;
}>;
type GetUserChannelsQuery = {
    __typename?: 'Query';
    userChannels: {
        __typename?: 'UserChannelConnection';
        pageInfo: {
            __typename?: 'PageInfo';
            hasPreviousPage: boolean;
            hasNextPage: boolean;
            startCursor?: string | null;
            endCursor?: string | null;
        };
        edges: Array<{
            __typename?: 'UserChannelEdge';
            cursor: string;
            node: {
                __typename?: 'UserChannel';
                id: string;
                channel: Channel;
                details: any;
                active: boolean;
                createdAt: any;
                updatedAt: any;
            };
        }>;
        nodes: Array<{
            __typename?: 'UserChannel';
            id: string;
            channel: Channel;
            details: any;
            active: boolean;
            createdAt: any;
            updatedAt: any;
        }>;
    };
};
type GetUserChannelsCountQueryVariables = Exact<{
    [key: string]: never;
}>;
type GetUserChannelsCountQuery = {
    __typename?: 'Query';
    userChannelsCount: number;
};
type GetUsersQueryVariables = Exact<{
    after?: InputMaybe<Scalars['String']>;
    before?: InputMaybe<Scalars['String']>;
    first?: InputMaybe<Scalars['Int']>;
    last?: InputMaybe<Scalars['Int']>;
    revert?: InputMaybe<Scalars['Boolean']>;
    sortBy?: InputMaybe<UserSortByKeys>;
    filters?: InputMaybe<UserFilters>;
}>;
type GetUsersQuery = {
    __typename?: 'Query';
    users: {
        __typename?: 'UserConnection';
        pageInfo: {
            __typename?: 'PageInfo';
            hasPreviousPage: boolean;
            hasNextPage: boolean;
            startCursor?: string | null;
            endCursor?: string | null;
        };
        edges: Array<{
            __typename?: 'UserEdge';
            cursor: string;
            node: {
                __typename?: 'User';
                id: string;
                appId: string;
                refId: string;
                createdAt: any;
                updatedAt: any;
            };
        }>;
        nodes: Array<{
            __typename?: 'User';
            id: string;
            appId: string;
            refId: string;
            createdAt: any;
            updatedAt: any;
        }>;
    };
};
type GetUsersCountQueryVariables = Exact<{
    filters?: InputMaybe<UserFilters>;
}>;
type GetUsersCountQuery = {
    __typename?: 'Query';
    usersCount: number;
};
type GetUsersWithCountQueryVariables = Exact<{
    after?: InputMaybe<Scalars['String']>;
    before?: InputMaybe<Scalars['String']>;
    first?: InputMaybe<Scalars['Int']>;
    last?: InputMaybe<Scalars['Int']>;
    revert?: InputMaybe<Scalars['Boolean']>;
    sortBy?: InputMaybe<UserSortByKeys>;
    filters?: InputMaybe<UserFilters>;
}>;
type GetUsersWithCountQuery = {
    __typename?: 'Query';
    count: number;
    users: {
        __typename?: 'UserConnection';
        pageInfo: {
            __typename?: 'PageInfo';
            hasPreviousPage: boolean;
            hasNextPage: boolean;
            startCursor?: string | null;
            endCursor?: string | null;
        };
        edges: Array<{
            __typename?: 'UserEdge';
            cursor: string;
            node: {
                __typename?: 'User';
                id: string;
                appId: string;
                refId: string;
                createdAt: any;
                updatedAt: any;
                channels: Array<{
                    __typename?: 'UserChannel';
                    id: string;
                    channel: Channel;
                    details: any;
                    active: boolean;
                    createdAt: any;
                    updatedAt: any;
                }>;
            };
        }>;
        nodes: Array<{
            __typename?: 'User';
            id: string;
            appId: string;
            refId: string;
            createdAt: any;
            updatedAt: any;
            channels: Array<{
                __typename?: 'UserChannel';
                id: string;
                channel: Channel;
                details: any;
                active: boolean;
                createdAt: any;
                updatedAt: any;
            }>;
        }>;
    };
};
type SaveUserMutationVariables = Exact<{
    id?: InputMaybe<Scalars['ID']>;
    refId?: InputMaybe<Scalars['ID']>;
    data: SaveUserData;
}>;
type SaveUserMutation = {
    __typename?: 'Mutation';
    saveUser: {
        __typename?: 'User';
        id: string;
        appId: string;
        refId: string;
        createdAt: any;
        updatedAt: any;
        app?: {
            __typename?: 'App';
            id: string;
            name: string;
            apiKeyCreatedAt?: any | null;
            enabledOrigin?: string | null;
            active: boolean;
            createdAt: any;
            updatedAt: any;
            hasApiKey: boolean;
        } | null;
        channels: Array<{
            __typename?: 'UserChannel';
            id: string;
            channel: Channel;
            details: any;
            active: boolean;
            createdAt: any;
            updatedAt: any;
        }>;
    };
};
type SendMutationVariables = Exact<{
    notification?: InputMaybe<CreateNotificationData>;
    notificationId?: InputMaybe<Scalars['ID']>;
}>;
type SendMutation = {
    __typename?: 'Mutation';
    send: {
        __typename?: 'Notification';
        id: string;
        appId: string;
        senderId?: string | null;
        typeId?: string | null;
        rawContent?: any | null;
        rawChannels?: any | null;
        replacements?: any | null;
        addedToQueueAt?: any | null;
        scheduledFor?: any | null;
        createdAt: any;
        updatedAt: any;
        notificationType?: {
            __typename?: 'NotificationType';
            id: string;
            name: string;
        } | null;
    };
};
type UpdateNotificationTypeMutationVariables = Exact<{
    id: Scalars['ID'];
    data: UpdateNotificationTypeData;
}>;
type UpdateNotificationTypeMutation = {
    __typename?: 'Mutation';
    updateNotificationType: {
        __typename?: 'NotificationType';
        id: string;
        appId: string;
        name: string;
        description: string;
        notificationCenterTitle?: string | null;
        notificationCenterBody?: string | null;
        notificationCenterIcon?: string | null;
        emailTemplateSubject?: string | null;
        emailTemplateText?: string | null;
        emailTemplateHtmlPath?: string | null;
        tempEmailTemplateHtml?: string | null;
        smsTemplate?: string | null;
        webPushTemplate?: any | null;
        notificationCenterEnabled: boolean;
        emailEnabled: boolean;
        smsEnabled: boolean;
        webPushEnabled: boolean;
        active: boolean;
        createdAt: any;
        updatedAt: any;
    };
};
type UpdateUserMutationVariables = Exact<{
    refId: Scalars['ID'];
    data: UpdateUserData;
}>;
type UpdateUserMutation = {
    __typename?: 'Mutation';
    updateUser: {
        __typename?: 'User';
        id: string;
        appId: string;
        refId: string;
        createdAt: any;
        updatedAt: any;
        app?: {
            __typename?: 'App';
            id: string;
            name: string;
            apiKeyCreatedAt?: any | null;
            enabledOrigin?: string | null;
            active: boolean;
            createdAt: any;
            updatedAt: any;
            hasApiKey: boolean;
        } | null;
        channels: Array<{
            __typename?: 'UserChannel';
            id: string;
            channel: Channel;
            details: any;
            active: boolean;
            createdAt: any;
            updatedAt: any;
        }>;
    };
};
type UpdateUserChannelMutationVariables = Exact<{
    id: Scalars['ID'];
    data: UpdateUserChannelData;
}>;
type UpdateUserChannelMutation = {
    __typename?: 'Mutation';
    updateUserChannel: {
        __typename?: 'UserChannel';
        id: string;
        channel: Channel;
        details: any;
        active: boolean;
        createdAt: any;
        updatedAt: any;
    };
};
type SdkFunctionWrapper = <T>(action: (requestHeaders?: Record<string, string>) => Promise<T>, operationName: string, operationType?: string) => Promise<T>;
declare function getSdk(client: GraphQLClient, withWrapper?: SdkFunctionWrapper): {
    createNotification(variables: CreateNotificationMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<CreateNotificationMutation>;
    createNotificationType(variables: CreateNotificationTypeMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<CreateNotificationTypeMutation>;
    createUser(variables: CreateUserMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<CreateUserMutation>;
    createUserChannel(variables: CreateUserChannelMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<CreateUserChannelMutation>;
    deleteNotification(variables: DeleteNotificationMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<DeleteNotificationMutation>;
    deleteNotificationType(variables: DeleteNotificationTypeMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<DeleteNotificationTypeMutation>;
    deleteUser(variables?: DeleteUserMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<DeleteUserMutation>;
    deleteUserChannel(variables: DeleteUserChannelMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<DeleteUserChannelMutation>;
    generateUserToken(variables?: GenerateUserTokenMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<GenerateUserTokenMutation>;
    getNotification(variables: GetNotificationQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<GetNotificationQuery>;
    getNotificationType(variables: GetNotificationTypeQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<GetNotificationTypeQuery>;
    getNotificationTypes(variables?: GetNotificationTypesQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<GetNotificationTypesQuery>;
    getNotificationTypesCount(variables?: GetNotificationTypesCountQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<GetNotificationTypesCountQuery>;
    getNotifications(variables?: GetNotificationsQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<GetNotificationsQuery>;
    getNotificationsCount(variables?: GetNotificationsCountQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<GetNotificationsCountQuery>;
    getUser(variables?: GetUserQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<GetUserQuery>;
    getUserChannel(variables: GetUserChannelQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<GetUserChannelQuery>;
    getUserChannels(variables?: GetUserChannelsQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<GetUserChannelsQuery>;
    getUserChannelsCount(variables?: GetUserChannelsCountQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<GetUserChannelsCountQuery>;
    getUsers(variables?: GetUsersQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<GetUsersQuery>;
    getUsersCount(variables?: GetUsersCountQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<GetUsersCountQuery>;
    getUsersWithCount(variables?: GetUsersWithCountQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<GetUsersWithCountQuery>;
    saveUser(variables: SaveUserMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<SaveUserMutation>;
    send(variables?: SendMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<SendMutation>;
    updateNotificationType(variables: UpdateNotificationTypeMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<UpdateNotificationTypeMutation>;
    updateUser(variables: UpdateUserMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<UpdateUserMutation>;
    updateUserChannel(variables: UpdateUserChannelMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<UpdateUserChannelMutation>;
};
type Sdk = ReturnType<typeof getSdk>;

type HNSClientConfig = {
    appId: string;
    apiKey: string;
    apiUrl?: string;
};
declare class HNSClient {
    private static _instance;
    private _apiUrl;
    private _appId?;
    private _apiKey?;
    private _jwt?;
    private _lastJwtGenerationTime;
    private _sdk?;
    private constructor();
    private generateJWT;
    static getInstance(): HNSClient;
    private withToken;
    init(config: HNSClientConfig): this;
    getSdk(): {
        createNotification(variables: Exact<{
            data: CreateNotificationData;
        }>, requestHeaders?: (Record<string, string> | Dom.Headers | string[][]) | undefined): Promise<CreateNotificationMutation>;
        createNotificationType(variables: Exact<{
            data: CreateNotificationTypeData;
        }>, requestHeaders?: (Record<string, string> | Dom.Headers | string[][]) | undefined): Promise<CreateNotificationTypeMutation>;
        createUser(variables: Exact<{
            data: CreateUserData;
        }>, requestHeaders?: (Record<string, string> | Dom.Headers | string[][]) | undefined): Promise<CreateUserMutation>;
        createUserChannel(variables: Exact<{
            data: CreateUserChannelData;
        }>, requestHeaders?: (Record<string, string> | Dom.Headers | string[][]) | undefined): Promise<CreateUserChannelMutation>;
        deleteNotification(variables: Exact<{
            id: string;
        }>, requestHeaders?: (Record<string, string> | Dom.Headers | string[][]) | undefined): Promise<DeleteNotificationMutation>;
        deleteNotificationType(variables: Exact<{
            id: string;
        }>, requestHeaders?: (Record<string, string> | Dom.Headers | string[][]) | undefined): Promise<DeleteNotificationTypeMutation>;
        deleteUser(variables?: Exact<{
            id?: InputMaybe<string> | undefined;
            refId?: InputMaybe<string> | undefined;
        }> | undefined, requestHeaders?: (Record<string, string> | Dom.Headers | string[][]) | undefined): Promise<DeleteUserMutation>;
        deleteUserChannel(variables: Exact<{
            id: string;
        }>, requestHeaders?: (Record<string, string> | Dom.Headers | string[][]) | undefined): Promise<DeleteUserChannelMutation>;
        generateUserToken(variables?: Exact<{
            id?: InputMaybe<string> | undefined;
            refId?: InputMaybe<string> | undefined;
        }> | undefined, requestHeaders?: (Record<string, string> | Dom.Headers | string[][]) | undefined): Promise<GenerateUserTokenMutation>;
        getNotification(variables: Exact<{
            id: string;
        }>, requestHeaders?: (Record<string, string> | Dom.Headers | string[][]) | undefined): Promise<GetNotificationQuery>;
        getNotificationType(variables: Exact<{
            id: string;
        }>, requestHeaders?: (Record<string, string> | Dom.Headers | string[][]) | undefined): Promise<GetNotificationTypeQuery>;
        getNotificationTypes(variables?: Exact<{
            after?: InputMaybe<string> | undefined;
            before?: InputMaybe<string> | undefined;
            first?: InputMaybe<number> | undefined;
            last?: InputMaybe<number> | undefined;
            revert?: InputMaybe<boolean> | undefined;
            sortBy?: InputMaybe<NotificationTypeSortByKeys> | undefined;
            filters?: InputMaybe<NotificationTypeFilters> | undefined;
        }> | undefined, requestHeaders?: (Record<string, string> | Dom.Headers | string[][]) | undefined): Promise<GetNotificationTypesQuery>;
        getNotificationTypesCount(variables?: Exact<{
            [key: string]: never;
        }> | undefined, requestHeaders?: (Record<string, string> | Dom.Headers | string[][]) | undefined): Promise<GetNotificationTypesCountQuery>;
        getNotifications(variables?: Exact<{
            after?: InputMaybe<string> | undefined;
            before?: InputMaybe<string> | undefined;
            first?: InputMaybe<number> | undefined;
            last?: InputMaybe<number> | undefined;
            revert?: InputMaybe<boolean> | undefined;
            sortBy?: InputMaybe<NotificationSortByKeys> | undefined;
            filters?: InputMaybe<NotificationFilters> | undefined;
        }> | undefined, requestHeaders?: (Record<string, string> | Dom.Headers | string[][]) | undefined): Promise<GetNotificationsQuery>;
        getNotificationsCount(variables?: Exact<{
            [key: string]: never;
        }> | undefined, requestHeaders?: (Record<string, string> | Dom.Headers | string[][]) | undefined): Promise<GetNotificationsCountQuery>;
        getUser(variables?: Exact<{
            refId?: InputMaybe<string> | undefined;
            id?: InputMaybe<string> | undefined;
        }> | undefined, requestHeaders?: (Record<string, string> | Dom.Headers | string[][]) | undefined): Promise<GetUserQuery>;
        getUserChannel(variables: Exact<{
            id: string;
        }>, requestHeaders?: (Record<string, string> | Dom.Headers | string[][]) | undefined): Promise<GetUserChannelQuery>;
        getUserChannels(variables?: Exact<{
            after?: InputMaybe<string> | undefined;
            before?: InputMaybe<string> | undefined;
            first?: InputMaybe<number> | undefined;
            last?: InputMaybe<number> | undefined;
            revert?: InputMaybe<boolean> | undefined;
            sortBy?: InputMaybe<UserChannelSortByKeys> | undefined;
            filters?: InputMaybe<UserChannelFilters> | undefined;
        }> | undefined, requestHeaders?: (Record<string, string> | Dom.Headers | string[][]) | undefined): Promise<GetUserChannelsQuery>;
        getUserChannelsCount(variables?: Exact<{
            [key: string]: never;
        }> | undefined, requestHeaders?: (Record<string, string> | Dom.Headers | string[][]) | undefined): Promise<GetUserChannelsCountQuery>;
        getUsers(variables?: Exact<{
            after?: InputMaybe<string> | undefined;
            before?: InputMaybe<string> | undefined;
            first?: InputMaybe<number> | undefined;
            last?: InputMaybe<number> | undefined;
            revert?: InputMaybe<boolean> | undefined;
            sortBy?: InputMaybe<UserSortByKeys> | undefined;
            filters?: InputMaybe<UserFilters> | undefined;
        }> | undefined, requestHeaders?: (Record<string, string> | Dom.Headers | string[][]) | undefined): Promise<GetUsersQuery>;
        getUsersCount(variables?: Exact<{
            filters?: InputMaybe<UserFilters> | undefined;
        }> | undefined, requestHeaders?: (Record<string, string> | Dom.Headers | string[][]) | undefined): Promise<GetUsersCountQuery>;
        getUsersWithCount(variables?: Exact<{
            after?: InputMaybe<string> | undefined;
            before?: InputMaybe<string> | undefined;
            first?: InputMaybe<number> | undefined;
            last?: InputMaybe<number> | undefined;
            revert?: InputMaybe<boolean> | undefined;
            sortBy?: InputMaybe<UserSortByKeys> | undefined;
            filters?: InputMaybe<UserFilters> | undefined;
        }> | undefined, requestHeaders?: (Record<string, string> | Dom.Headers | string[][]) | undefined): Promise<GetUsersWithCountQuery>;
        saveUser(variables: Exact<{
            id?: InputMaybe<string> | undefined;
            refId?: InputMaybe<string> | undefined;
            data: SaveUserData;
        }>, requestHeaders?: (Record<string, string> | Dom.Headers | string[][]) | undefined): Promise<SaveUserMutation>;
        send(variables?: Exact<{
            notification?: InputMaybe<CreateNotificationData> | undefined;
            notificationId?: InputMaybe<string> | undefined;
        }> | undefined, requestHeaders?: (Record<string, string> | Dom.Headers | string[][]) | undefined): Promise<SendMutation>;
        updateNotificationType(variables: Exact<{
            id: string;
            data: UpdateNotificationTypeData;
        }>, requestHeaders?: (Record<string, string> | Dom.Headers | string[][]) | undefined): Promise<UpdateNotificationTypeMutation>;
        updateUser(variables: Exact<{
            refId: string;
            data: UpdateUserData;
        }>, requestHeaders?: (Record<string, string> | Dom.Headers | string[][]) | undefined): Promise<UpdateUserMutation>;
        updateUserChannel(variables: Exact<{
            id: string;
            data: UpdateUserChannelData;
        }>, requestHeaders?: (Record<string, string> | Dom.Headers | string[][]) | undefined): Promise<UpdateUserChannelMutation>;
    };
    reset(): void;
    isInitialized(): boolean;
    isJwtExpired(): boolean;
}
declare function initClient(config: HNSClientConfig): HNSClient;
declare function getClient(noSdk: boolean): HNSClient;
declare function getClient(): Sdk;

export { Channel, HNSClient, HNSClientConfig, getClient, initClient };
