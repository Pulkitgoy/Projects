import jwt from 'jsonwebtoken'

export async function generateJwt(apiKey: string, appId: string): Promise<string | undefined> {
  // return jwt.sign(payload, apiKey, { algorithm: 'HS256' })

  return new Promise((resolve, reject) => {
    const payload = {
      appId,
      iat: Math.floor(Date.now() / 1000),
      aud: 'app',

      // Add a random number to the payload to prevent JWT caching
      random: Math.random(),

      // The `exp` claim  must be a Unix timestamp
      // that is not more than 24 hours after the `iat` claim. Otherwise, the JWT will
      // be rejected. This is useful to prevent tokens that are issued by accident
      // from being valid for very long.
      exp: Math.floor(Date.now() / 1000) + 86400,
    }

    jwt.sign(payload, apiKey, { algorithm: 'HS256' }, (err, token) => {
      if (err) {
        reject(err)
      }

      resolve(token)
    })
  })
}
